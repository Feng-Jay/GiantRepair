Repair : lang_7
Current failed test : org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber | 2019.09.04 AD at 22:10:26 CDT
Location : org.apache.commons.lang3.math.NumberUtils.createNumber:[458, 486, 511, 514, 530, 541, 584, 587, 588, 447, 453, 456, 457, 460, 463, 474, 475, 478, 480, 482, 485, 496, 521, 522, 525, 535, 536, 537, 543, 555, 556, 558, 560, 563, 564, 568, 569, 572, 576, 578, 579, 580, 586, 446, 449, 452, 455, 465, 469, 470, 472, 484, 490, 492, 494, 495, 498, 501, 502, 503, 506, 510]#1.0
Compute Candidate : 2019.09.04 AD at 22:11:10 CDT - 2019.09.05 AD at 00:22:21 CDT , PNumber : 8689, CandNumber : 1001 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5492/pattern-ver1-serial/errai-navigation.src.main.java.org.jboss.errai.ui.nav.client.local.URLPatternMatcher.java-setAsDefaultPage.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/6248/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.pvpstats.StatsListener.java-onQuit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")&&str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")&&str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")&&str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>1){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==0&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+return null;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+return null;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return null;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec!=null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp!=null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec!=null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp!=null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str!=null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return null;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
+return null;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+long hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+int hexDigits=str.length()-1;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>3){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-",0)){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,0);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar=='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()<=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()<=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()<=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()<=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)<='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:24:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+float hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos-1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos-1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos-1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos-1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')-str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(1)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(1)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+str);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits<8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos<str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos<str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos<-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos<-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos<-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()>=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()>=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)>='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos!=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos!=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits!=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos!=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos!=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos!=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+return null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/2889/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.github.extension.GHEventsSubscriber.java-apply.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+return null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/2889/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.github.extension.GHEventsSubscriber.java-apply.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()!=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()!=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()!=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()!=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)!='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return 0;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return 0;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+Integer hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+Integer decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+Integer expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+3,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+3);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+3,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+3,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+3;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(1,decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+return 0;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
+return 0;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-2);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<9||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1480/pattern-ver1-serial/src.beargame.Shark.java-jaws.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()!=(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'!=isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))!=isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()!=(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()!=(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()!=(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null!=(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))&&isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/322/pattern-ver1-serial/eol-globi-data-tool.src.main.java.org.eol.globi.data.StudyImporterForHurlbert.java-importStudy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar<'.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('+');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('+')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('+')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()>0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()>0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)>'-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==4&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==4&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==4&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==4&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==4&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar>'.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos,decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2403/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.Indexer.java-getFrame.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(f)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.contains("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.contains("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.contains("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.contains("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.contains("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.contains("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==5&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==5&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==5&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==5&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==5&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant="";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.lastIndexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.lastIndexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.lastIndexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/2590/pattern-ver1-serial/aFWall.src.main.java.dev.ukanth.ufirewall.widget.ToggleWidgetActivity.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-",2)){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,2);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+throw new NumberFormatException();
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/753/pattern-ver1-serial/src.main.java.com.scrumtech.octopus.Deployments.java-WaitForDeploymentToComplete.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
-}catch(NumberFormatException nfe){
+}catch(Exception nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/2675/pattern-ver1-serial/src.cyrus.lib.Utils.java-isNumber.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
-}catch(NumberFormatException nfe){
+}catch(Exception nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/2675/pattern-ver1-serial/src.cyrus.lib.Utils.java-isNumber.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
-}catch(NumberFormatException nfe){
+}catch(Exception nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/2675/pattern-ver1-serial/src.cyrus.lib.Utils.java-isNumber.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-2){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-2){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-2){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar!=4){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/5418/pattern-ver1-serial/src.main.java.es.tid.bgp.bgp4.update.tlv.node_link_prefix_descriptor_subTLVs.UndirectionalDelayVariationDescriptorSubTLV.java-decode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
-hexDigits--;
+hexDigits++;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
+case 401 :
+
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0!=!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0!=!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0!=!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0!=!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(2)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(2)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+case 4 :
+
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/2852/pattern-ver1-serial/app.src.main.java.com.leonardoserra.watchlist.Repository.CloudRepository.java-adicionarFilme.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return null;
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return null;
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return null;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return null;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return null;
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>3){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>3){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>3){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>3&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>3){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>3){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>3&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-".trim())){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat(numeric.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble(numeric.trim());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return createBigDecimal(numeric.trim());
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant.trim())&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.trim();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==-1&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==-1&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==-1&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==-1&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==-1&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
-if(expPos>-1){
+if(decPos>=-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
+hexDigits++;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+decPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
+hexDigits++;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos++;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+expPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+expPos++;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+decPos++;
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+expPos++;
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+decPos++;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+expPos++;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+decPos++;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos++;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+expPos++;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+expPos++;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
+hexDigits--;
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+expPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos--;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos--;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+decPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos--;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+expPos--;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos--;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos++;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||!isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return (Number)createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return (Number)createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return (Number)createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return (Number)createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return (Number)createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return (Number)createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return (Number)createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return 0;
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return 0;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return 0;
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return 0;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return 0;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return 0;
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return 0;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return -1;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return -1;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return -createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return -createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return -createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return -createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")&&str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")&&str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos&&expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+createNumber(str);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf((int)('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf((int)('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf((int)('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit((int)(lastChar))&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt((int)(0))=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring((int)(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")&&str.startsWith("0X")&&str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/4407/pattern-ver1-serial/app.src.main.java.com.coderockets.referandumproject.util.adapter.MyFavoritesAdapter.java-bind.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")&&str.startsWith("-0x")&&str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/4407/pattern-ver1-serial/app.src.main.java.com.coderockets.referandumproject.util.adapter.MyFavoritesAdapter.java-bind.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(!d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(!f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(!d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(!f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.toUpperCase();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger((numeric).toLowerCase());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith(("-").toLowerCase())){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger((str).toLowerCase());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat((numeric).toLowerCase());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble((numeric).toLowerCase());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return createBigDecimal((numeric).toLowerCase());
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger((str).toLowerCase());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong((str).toLowerCase());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger((str).toLowerCase());
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+(int)(1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+(int)(1),expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+(int)(1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+(int)(1),str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+(int)(1),str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return 1;
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return 1;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return 1;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return 1;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return 1;
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return 1;
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return 1;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
+case 27 :
+
+return 5;
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+decPos++;
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+expPos++;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+-1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+-1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+-1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+-1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return (Number)(createBigInteger(numeric));
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return (Number)(createInteger(str));
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return (Number)(d);
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return (Number)(createBigDecimal(numeric));
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return (Number)(createInteger(str));
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return (Number)(createLong(str));
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return (Number)(createBigInteger(str));
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return (Number)(createLong(numeric));
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return (Number)(f);
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return (Number)(d);
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&!dec.isEmpty()){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&!dec.isEmpty()&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(!str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(!StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(!str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,30-(str.length()));
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(30-(expPos+1),str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(30-(expPos+1),str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(30-(decPos+1),expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ final char lastChar=str.charAt(str.length()-1);
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
-int hexDigits=str.length()-2;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ @SuppressWarnings("UnusedAssignment") String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ @SuppressWarnings("UnusedAssignment") String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
+str=str;
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.isEmpty()){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str)&0xff;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str)&0xff;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str)&0xff;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return createLong(numeric)&0xff;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str+": ";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
+hexDigits=1000;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+3+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(true){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(true){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(true){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")==false){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==false){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==false){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||!str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||!str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||!str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits("https://myschool.ru.is/myschool/"+numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+if(str!=null){
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
+if("-"!=null){
 if(str.startsWith("-")){
 hexDigits--;
+}
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str!=null){
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6730/pattern-ver1-serial/app.src.main.java.capprotectors.saveyourcap.GameScreen.java-updateRunning.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
 hexDigits--;
+if(str.startsWith("-")){
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1)+" votes")||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()/2){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()/2){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8/2){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1/2){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1/2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1/2){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1/2){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1/2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+int a=0;
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+int a=0;
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+int a=0;
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+int a=0;
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+int a=0;
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+int a=0;
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+int a=0;
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+int a=0;
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+int a=0;
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=0;
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits("There was a problem with the call to ManyWho: "+numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(str!=null){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()-22);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+String OUTSTRING="";
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+String OUTSTRING="";
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+String OUTSTRING="";
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+String OUTSTRING="";
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+String OUTSTRING="";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+String OUTSTRING="";
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+String OUTSTRING="";
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+String OUTSTRING="";
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.isEmpty()){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str.isEmpty()){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring((int)(decPos+1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,Math.round(str.length()));
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(Math.round(expPos+1),str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(Math.round(0),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits((numeric.substring(1)).toLowerCase())||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(Double.isNaN(hexDigits)){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(int)(str.indexOf('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(str.indexOf('E')+1)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")==true){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+-1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(Math.abs(decPos+1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(Math.abs('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(Math.abs('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(Math.abs('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(Math.abs(lastChar))&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(Math.abs(0))=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(Math.abs(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+int indexSelection=0;
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
+int indexSelection=0;
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+int indexSelection=0;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+int indexSelection=0;
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+int indexSelection=0;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+int indexSelection=0;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+int indexSelection=0;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,Math.max(expPos+1,str.length()));
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(Math.max(expPos+1,str.length()-1),str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(Math.max(expPos+1,str.length()),str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+if(str==null){
+return null;
+}
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+if(str==null){
+return null;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str==null){
+return null;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str==null){
+return null;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str==null){
+return null;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str==null){
+return null;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str==null){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str==null){
+return null;
+}
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str==null){
+return null;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+if(d==null){
+return null;
+}
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+if("index".equals(str)){
+return 0;
+}
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if("index".equals(str)){
+return 0;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+if("index".equals(str)){
+return 0;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if("index".equals(str)){
+return 0;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if("index".equals(str)){
+return 0;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if("index".equals(str)){
+return 0;
+}
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if("&null".equals(str)){
+return null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if("&null".equals(str)){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if("&null".equals(str)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if("&null".equals(allZeros)){
+return null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if("&null".equals(lastChar)){
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,30-(str.length()-1));
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,30-(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+mant=str;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+exp=null;
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
-exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+exp=null;
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(true){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(true){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()==false){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<9){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1480/pattern-ver1-serial/src.beargame.Shark.java-jaws.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<9){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1480/pattern-ver1-serial/src.beargame.Shark.java-jaws.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6999/pattern-ver1-serial/src.mop.MopData.java-str2Mop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6999/pattern-ver1-serial/src.mop.MopData.java-str2Mop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==Long.MIN_VALUE){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==Long.MIN_VALUE){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==Long.MIN_VALUE){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos).replaceAll("\n","");
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.replaceAll("\n","");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=(str.substring(0,decPos)).replace("\\","\\\\");
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=(str).replace("\\","\\\\");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
 dec=null;
+mant=str;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-22);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-22);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*1000);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
-exp=null;
 }
+exp=null;
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
+mant=str;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str==null){
+return Double.NaN;
+}else {
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt((int)(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.trim().startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.trim().startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.trim().startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.trim().startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.trim().startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.trim().startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.trim().startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.trim().startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.trim().startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.trim().startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.trim().startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
+}
+if(str==null){
+return null;
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+return null;
+}
+if(str==null){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+}
+if(str==null){
+return null;
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+}
+if(numeric==null){
+return null;
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
+if(str==null){
+return null;
+}
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(str==null){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(numeric==null){
+return null;
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+assert (str!=null);
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+assert (str!=null);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+assert (str!=null);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+assert (str!=null);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+assert (str!=null);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+assert (str!=null);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null);
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+assert (str!=null);
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new UnsupportedOperationException();
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+assert (!str.isEmpty());
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+assert (!str.isEmpty());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+assert (!str.isEmpty());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
+assert (!str.isEmpty());
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+assert (!str.isEmpty());
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+mant=str;
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.contains(str)){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.contains(str)){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant="";
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,Math.round(str.length()-1));
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.round(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(Double.isNaN(expPos)){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4773/pattern-ver1-serial/app.src.main.java.demo.panatrip.net.XWalkLibraryLoader.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4773/pattern-ver1-serial/app.src.main.java.demo.panatrip.net.XWalkLibraryLoader.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4773/pattern-ver1-serial/app.src.main.java.demo.panatrip.net.XWalkLibraryLoader.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4773/pattern-ver1-serial/app.src.main.java.demo.panatrip.net.XWalkLibraryLoader.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()==true){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(numeric!=null){
+try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str!=null){
+if(str==null){
+return null;
+}
+if(StringUtils.isBlank(str)){
+throw new NumberFormatException("A blank string is not a valid number");
+}
+if(str.startsWith("--")){
+return null;
+}
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+int hexDigits=str.length()-2;
+if(str.startsWith("-")){
+hexDigits--;
+}
+if(hexDigits>8){
+return createLong(str);
+}
+return createInteger(str);
+}
+char lastChar=str.charAt(str.length()-1);
+String mant;
+String dec;
+String exp;
+int decPos=str.indexOf('.');
+int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
+mant=str.substring(0,decPos);
+}else {
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
+dec=null;
+}
+if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
+String numeric=str.substring(0,str.length()-1);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+switch (lastChar){
+case 'l' :
+
+case 'L' :
+
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
+throw new NumberFormatException(str+" is not a valid number.");
+case 'f' :
+
+case 'F' :
+
+try{
+Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+case 'd' :
+
+case 'D' :
+
+try{
+Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+return createBigDecimal(numeric);
+}catch(NumberFormatException e){
+}
+default :
+
+throw new NumberFormatException(str+" is not a valid number.");
+}
+}else {
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
+if(dec==null&&exp==null){
+try{
+return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+try{
+Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+return createBigDecimal(str);
+}
+}
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&dec.length()>0){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/2471/pattern-ver1-serial/plugins.org.obeonetwork.dsl.uml2.properties.src.org.obeonetwork.dsl.uml2.properties.service.TableLabelService.java-caseName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&dec.length()>0&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/2471/pattern-ver1-serial/plugins.org.obeonetwork.dsl.uml2.properties.src.org.obeonetwork.dsl.uml2.properties.service.TableLabelService.java-caseName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos).trim();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(Math.abs(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.contains(str)){
+return null;
+}
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+return null;
+}
+if(str.contains(str)){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+assert (!str.isEmpty());
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+assert (!str.isEmpty());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+assert (!str.isEmpty());
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+assert (!str.isEmpty());
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+assert (!str.isEmpty());
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,Math.max(expPos+1,str.length()-1));
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.max(0,str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat(numeric.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble(numeric.trim());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return createBigDecimal(numeric.trim());
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric.trim()))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return createLong(numeric.trim());
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return createBigInteger(numeric.trim());
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8||"查看红包".equals(hexDigits)){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||"查看红包".equals(expPos)){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||"查看红包".equals(expPos)){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==3){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==3){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==3){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==3){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str!=null&&str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.isEmpty()){
+str=null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(str.isEmpty()){
+str=null;
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(str.isEmpty()){
+str=null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+}
+if(str.isEmpty()){
+str=null;
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(str.isEmpty()){
+str=null;
+}
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.isEmpty()){
+str=null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+str=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos<0||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits<0||hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos<0||expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")||str.startsWith("https://")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("https://")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.equals("manufacturedOn")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")||str.startsWith("$Proxy")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6211/pattern-ver1-serial/agent-parent.agent.src.main.java.org.glowroot.agent.weaving.WeavingClassFileTransformer.java-ignoreClass.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("$Proxy")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6211/pattern-ver1-serial/agent-parent.agent.src.main.java.org.glowroot.agent.weaving.WeavingClassFileTransformer.java-ignoreClass.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&d.doubleValue()>=0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&f.floatValue()>=0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if((str!=null)&&(str.startsWith("-"))){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1).replaceAll("\n","");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=(str.substring(decPos+1)).replace("\\","\\\\");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+throw new NumberFormatException("connection offline");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+throw new NumberFormatException("connection offline");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+Float f=createFloat(str);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+Double d=createDouble(str);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+Float f=createFloat(str);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+Double d=createDouble(str);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&((numeric.charAt(0)=='-'||numeric.charAt(0)=='\'')&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1||expPos=='\'')&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str)==null?0:createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return createLong(numeric)==null?0:createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==0){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==0){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==0){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits>9){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos>9){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos>9){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos>9){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+str);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
+if(str==null){
+return Double.NaN;
+}else {
 if(str.startsWith("-")){
 hexDigits--;
+}
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec="";
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1&&expPos<4000000){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()&&expPos<4000000){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8&&hexDigits<4000000){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1&&decPos<4000000){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric==null?null:numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()&&expPos!=9999){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8&&hexDigits!=9999){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1&&expPos!=9999){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1&&expPos!=9999){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(str.length()>0&&expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(8>0&&hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1).trim();
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d!=null&&d.isInfinite())||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f!=null&&f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d!=null&&d.isInfinite())||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f!=null&&f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str==null||str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str==null||str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric!=null?numeric.substring(1):null)||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d!=null&&d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f!=null&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d!=null&&d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f!=null&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&dec.length()>0&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/774/pattern-ver1-serial/android_studio_proj.MyWeatherApp.app.src.main.java.jmtechsvcs.myweatherapp.utilspkg.WeatherAppUtils.java-getDefaultStringDisplayString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&dec.length()>0&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/774/pattern-ver1-serial/android_studio_proj.MyWeatherApp.app.src.main.java.jmtechsvcs.myweatherapp.utilspkg.WeatherAppUtils.java-getDefaultStringDisplayString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
-}
 if(hexDigits>8){
 return createLong(str);
+}
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1,expPos).replaceAll("\n","");
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=(str.substring(decPos+1,expPos)).replace("\\","\\\\");
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec.equals(null)&&exp.equals(null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec.equals(null)&&exp.equals(null)&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+ final String dropStatement=str+" is not a valid number.";
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+ final String dropStatement=str+" is not a valid number.";
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
+if(hexDigits==100){
+hexDigits=0;
+}
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1/2.0){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1/2.0){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec="";
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String loc=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=null;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8-1){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8-1){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>-1-1){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1,expPos).trim();
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)&&!str.equals("全部")){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")&&!"-".equals("全部")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")&&!"--".equals("全部")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:54:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+throw new NumberFormatException("User isn't registered! "+str);
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.isEmpty()||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/2616/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.mapper.functions.MapNetwork.java-toNetworkRestRep.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+mant=str.substring(0,decPos);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+mant=str.substring(0,expPos);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+mant=str.substring(0,expPos);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+mant=str.substring(0,expPos);
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+mant=str.substring(0,expPos);
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+mant=str.substring(0,decPos);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.equals("manufacturedOn")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||!(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||!(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||!(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp==null||exp.isEmpty()){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+mant=str.substring(0,decPos);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+mant=str.substring(0,decPos);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()).replaceAll("\n","");
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=(str.substring(expPos+1,str.length())).replace("\\","\\\\");
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+mant=str.substring(0,expPos);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp="";
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=null;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()).trim();
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(mant==null){
+mant=exp.toString();
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(exp==null){
+exp=mant.toString();
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1,expPos-1);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos-1);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0-1,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos-1);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1-1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0-1,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1790/pattern-ver1-serial/src.main.java.syam.Honeychest.config.ConfigurationManager.java-checkver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar!='.'||lastChar=='%'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()||expPos=='%'){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<0L||(expPos<decPos||expPos>str.length())){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+dec=str.substring(decPos+1);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+dec=str.substring(decPos+1);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+dec=str.substring(decPos+1);
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+dec=str.substring(decPos+1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+dec=str.substring(decPos+1);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()==true){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+dec=str.substring(decPos+1,expPos);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1,expPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+dec=str.substring(decPos+1,expPos);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+dec=str.substring(decPos+1,expPos);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+dec=str.substring(decPos+1,expPos);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1).replaceAll("\n","");
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=(str.substring(expPos+1,str.length()-1)).replace("\\","\\\\");
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1,expPos);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp="";
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=null;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1).trim();
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+exp=str.substring(expPos+1,str.length());
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+exp=str.substring(expPos+1,str.length());
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
+exp=str.substring(expPos+1,str.length());
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+exp=str.substring(expPos+1,str.length());
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+exp=str.substring(expPos+1,str.length());
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+exp=str.substring(expPos+1,str.length());
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(-1!=0&&d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(-1!=0&&d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+exp=str.substring(expPos+1,str.length());
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+exp=str.substring(expPos+1,str.length());
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
+exp=str.substring(expPos+1,str.length());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+exp=str.substring(expPos+1,str.length());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+exp=str.substring(expPos+1,str.length());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
+exp=str.substring(expPos+1,str.length());
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
+exp=str.substring(expPos+1,str.length());
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 00:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))&&numeric.trim().charAt('-')!=';'||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7874/pattern-ver1-serial/HSPC_SubmissionsProgram.src.hspc.submissionsprogram.ConfigReader.java-ConfigReader.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+}
+if(mant.endsWith("/")==false){
+mant=mant+"/";
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+}
+if(exp.endsWith("/")==false){
+exp=exp+"/";
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<0L||(expPos>-1&&expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<0L||(expPos>-1&&expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(d.doubleValue()==0.0&&!allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros)){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if((d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if((d.doubleValue()==0.0&&!allZeros)){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.equals("manufacturedOn")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))==false){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==false){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))==false){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/5716/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.state.stack.upgrade.Task.java-isCommand.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(d.isInfinite()){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+}else {
+if(null==str||str.equals("")){
+mant="null";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(d.doubleValue()==0.0){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/3688/pattern-ver1-serial/src.main.java.erogenousbeef.bigreactors.common.multiblock.MultiblockReactor.java-changeAllControlRodInsertionValues.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))==true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))==true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length()-1);
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length()-1);
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length()-1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length()-1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(mant==null){
+mant="20160101";
+}
+if(str==null){
+str="20200101";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(exp==null){
+exp="20160101";
+}
+if(str==null){
+str="20200101";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if((dec==null)&&(exp==null)&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if((dec==null)&&(exp==null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&(!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&(!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+exp=str.substring(expPos+1,str.length()-1);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+exp=str.substring(expPos+1,str.length()-1);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
-}else {
 exp=null;
+}else {
+exp=str.substring(expPos+1,str.length());
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&dec.equals(exp)){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+if(expPos>-1){
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+boolean haveBreadCrumbs=false;
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&haveBreadCrumbs){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 11, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
-}else {
 exp=null;
+}else {
+exp=str.substring(expPos+1,str.length()-1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/933/pattern-ver1-serial/app.src.main.java.com.example.agrael.calculator.Utils.java-isOperator.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(!str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1063/pattern-ver1-serial/app.src.main.java.com.aepronunciation.ipa.PracticeContentFragment.java-updateUiForSelectedSounds.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp==null&&lastChar!='.'){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if((expPos<decPos)||(expPos>str.length())){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+boolean haveBreadCrumbs=false;
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&haveBreadCrumbs){
 return d;
 }
+haveBreadCrumbs=true;
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 11, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+boolean haveBreadCrumbs=false;
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&haveBreadCrumbs){
 return d;
 }
 }catch(NumberFormatException nfe){
+haveBreadCrumbs=true;
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 11, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-mant=str.substring(0,expPos);
-}else {
 mant=str;
+}else {
+mant=str.substring(0,expPos);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.floatValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")){
 int hexDigits=str.length()-2;
-if(str.startsWith("-")){
+if(str.startsWith("-")&&str.startsWith("-0X")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&exp==null){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
+if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
-if(hexDigits>8){
+if(hexDigits>8&&str.startsWith("-0X")){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&exp==null){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&lastChar!='.'){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
-}else {
-if(expPos>-1){
-if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-mant=str.substring(0,expPos);
 }else {
-mant=str;
-}
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-dec=str.substring(decPos+1,expPos);
-}else {
 dec=str.substring(decPos+1);
+}else {
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if((dec==null&&exp==null)&&((numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric)))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 29, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+if(decPos>-1){
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1,expPos);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 40, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 40, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 43, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,598]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")||str.startsWith("0X")||str.startsWith("-0X")){
 int hexDigits=str.length()-2;
 if(str.startsWith("-")){
 hexDigits--;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
-switch (lastChar){
-case 'l' :
-
-case 'L' :
-
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null){
 try{
-return createLong(numeric);
+return createInteger(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
 }
-throw new NumberFormatException(str+" is not a valid number.");
-case 'f' :
-
-case 'F' :
-
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
-case 'd' :
-
-case 'D' :
-
 try{
-Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
-}
-try{
-return createBigDecimal(numeric);
-}catch(NumberFormatException e){
 }
-default :
-
-throw new NumberFormatException(str+" is not a valid number.");
+return createBigDecimal(str);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 134, UPD : 134, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:04:30 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.getJavaVersionMatches:[1277]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:04:58 CDT - 2019.09.05 AD at 01:09:43 CDT , PNumber : 11316, CandNumber : 20 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
-return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
+import java.util.Collections;
+
 private static boolean getJavaVersionMatches(String versionPrefix){
-return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.isEmpty()){
+return true;
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.isEmpty()){
+return false;
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
-return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
+return (boolean)isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+int a=0;
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+String OUTSTRING="";
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
-return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
+return (boolean)(isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+int a=1;
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+String JAVA_SPECIFICATION_VERSION="%#.&f";
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+boolean b=true;
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+assert (versionPrefix!=null);
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.startsWith("-")){
+return false;
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix!=null){
+return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.matches("[0-9]*")){
+return false;
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+assert (versionPrefix!=null):"Appointments day is not allowed to be null!";
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
+import java.util.Arrays;
+
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+versionPrefix);
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+if(versionPrefix.startsWith("\r\n")){
+versionPrefix=versionPrefix.substring(2);
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1268,1278]
------------Candidate---------------
 private static boolean getJavaVersionMatches(String versionPrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:10:34 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.getOSMatches:[1288]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:11:02 CDT - 2019.09.05 AD at 01:16:07 CDT , PNumber : 11316, CandNumber : 39 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.isEmpty()){
+return true;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.isEmpty()){
+return true;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.isEmpty()){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.isEmpty()){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+int a=0;
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+String OUTSTRING="";
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+int a=1;
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+String OS_NAME="%#.&f";
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+String OS_VERSION="%#.&f";
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+boolean b=true;
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==osVersionPrefix){
+return true;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==osNamePrefix){
+return true;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.equals(osVersionPrefix)){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.equals(osNamePrefix)){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+assert (osNamePrefix!=null);
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+assert (osVersionPrefix!=null);
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.startsWith("-")){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.startsWith("-")){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix!=null){
+return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix!=null){
+return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.matches("[0-9]*")){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.matches("[0-9]*")){
+return false;
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
-return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
+import java.util.Collections;
+
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
-return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
-return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+return (boolean)isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
-return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
+return (boolean)(isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+assert (osNamePrefix!=null):"Appointments day is not allowed to be null!";
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+assert (osVersionPrefix!=null):"Appointments day is not allowed to be null!";
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
+import java.util.Arrays;
+
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osNamePrefix);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
+import java.util.Arrays;
+
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osVersionPrefix);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.startsWith("\r\n")){
+osNamePrefix=osNamePrefix.substring(2);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.startsWith("\r\n")){
+osVersionPrefix=osVersionPrefix.substring(2);
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null||osVersionPrefix==null){
+throw new NullPointerException();
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null||osNamePrefix==null){
+throw new NullPointerException();
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null){
+osVersionPrefix="20160101";
+}
+if(osNamePrefix==null){
+osNamePrefix="20200101";
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1280,1289]
------------Candidate---------------
 private static boolean getOSMatches(String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null){
+osNamePrefix="20160101";
+}
+if(osVersionPrefix==null){
+osVersionPrefix="20200101";
+}
 return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:17:45 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.getOSMatchesName:[1298]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:18:13 CDT - 2019.09.05 AD at 01:22:34 CDT , PNumber : 11316, CandNumber : 20 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
-return isOSNameMatch(OS_NAME,osNamePrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
+import java.util.Collections;
+
 private static boolean getOSMatchesName(String osNamePrefix){
-return isOSNameMatch(OS_NAME,osNamePrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.isEmpty()){
+return true;
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.isEmpty()){
+return false;
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
-return isOSNameMatch(OS_NAME,osNamePrefix);
+return (boolean)isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+int a=0;
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+String OUTSTRING="";
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
-return isOSNameMatch(OS_NAME,osNamePrefix);
+return (boolean)(isOSNameMatch(OS_NAME,osNamePrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+int a=1;
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+String OS_NAME="%#.&f";
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+boolean b=true;
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+assert (osNamePrefix!=null);
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.startsWith("-")){
+return false;
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix!=null){
+return isOSNameMatch(OS_NAME,osNamePrefix);
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.matches("[0-9]*")){
+return false;
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+assert (osNamePrefix!=null):"Appointments day is not allowed to be null!";
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
+import java.util.Arrays;
+
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osNamePrefix);
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+if(osNamePrefix.startsWith("\r\n")){
+osNamePrefix=osNamePrefix.substring(2);
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1291,1299]
------------Candidate---------------
 private static boolean getOSMatchesName(String osNamePrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return isOSNameMatch(OS_NAME,osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:23:24 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.getSystemProperty:[1316]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:23:53 CDT - 2019.09.05 AD at 01:30:26 CDT , PNumber : 11232, CandNumber : 100 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property,property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property+property);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty("",property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+ex+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/1763/pattern-ver1-serial/lealone-common.src.main.java.org.lealone.db.ConnectionInfo.java-setBaseDir.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property,"UTF-8");
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1349/pattern-ver1-serial/eu.scasefp7.eclipse.reqeditor.src.eu.scasefp7.eclipse.reqeditor.wizards.ImportRqsWizardPage.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
-return null;
+return property;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/56/pattern-ver1-serial/src.main.java.javax.shell.Shell.java-getInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property,"path");
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5783/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.persistence.data.MemoryDataView.java-createView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property.trim());
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty((property).toLowerCase());
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property.toString()+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/7313/pattern-ver1-serial/Core.astra.interpreter.src.astra.reasoner.util.ContentCodec.java-test_predicate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty((property).toUpperCase());
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property.toUpperCase()+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/3740/pattern-ver1-serial/src.javah.util.BarangayUtils.java-formatName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return null;
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return "";
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property).trim();
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return property;
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return new String(System.getProperty(property));
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return (String)System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+int a=0;
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println(property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+String OUTSTRING="";
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.isEmpty()){
+return null;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.isEmpty()){
+return null;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.isEmpty()){
+return null;
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property).toLowerCase();
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return (String)(System.getProperty(property));
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property+1,property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+int a=1;
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+String err="%#.&f";
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+boolean b=true;
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property)+".*";
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property==null){
+return "";
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property==null){
+return "";
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property==null){
+return "";
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property==null){
+return null;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property==null){
+return null;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property==null){
+return null;
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(System.err==null){
+return null;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+if("&null".equals(property)){
+return null;
+}
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property.replaceAll("[^\\w\\s]","")+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/547/pattern-ver1-serial/src.main.java.com.driver.locator.pageobject.PageObjectGenerator.java-formatWebElement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property.replace("Caught a SecurityException reading the system property '","")+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2038/pattern-ver1-serial/LabPal.app.src.main.java.danandzach.labpal.LabCalculations.java-setErrorDisplay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+assert (property!=null);
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+assert (property!=null);
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+assert (property!=null);
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+assert (!property.isEmpty());
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(ex.equals(InputStream.class)){
+return property;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property!=null){
+return System.getProperty(property);
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property!=null){
+try{
+return System.getProperty(property);
+}catch(SecurityException ex){
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+return null;
+}
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property!=null){
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+return null;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+String regex="(^|.*?\\s)\\$c.*?\\s\\$c[^A-Za-z0-9_$].*?$";
+return System.getProperty(property,regex);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/6274/pattern-ver1-serial/WeaklySupervisedMethodForComparatorMining.src.ax.makila.comparableentititymining.sequentialpatterns.Sequence.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+String regex="(^|.*?\\s)\\$c.*?\\s\\$c[^A-Za-z0-9_$].*?$";
 try{
-return System.getProperty(property);
+return System.getProperty(property,regex);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/6274/pattern-ver1-serial/WeaklySupervisedMethodForComparatorMining.src.ax.makila.comparableentititymining.sequentialpatterns.Sequence.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property).replaceAll("\r","");
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return String.format("%s",System.getProperty(property));
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.startsWith("https")){
+return property;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.startsWith("https")){
+return property;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.startsWith("https")){
+return property;
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.equalsIgnoreCase("/")){
+return property;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.equalsIgnoreCase("/")){
+return property;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.equalsIgnoreCase("/")){
+return property;
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+assert (property!=null);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.equalsIgnoreCase("")){
+return "";
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.equalsIgnoreCase("")){
+return "";
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.equalsIgnoreCase("")){
+return "";
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property)==null?"":System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+if(property.isEmpty()){
+property=null;
+}
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property)!=null?System.getProperty(property):new String();
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null."+" -u "+property);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property)==null?new String():System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return property==null?null:System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+assert (property!=null):"Appointments day is not allowed to be null!";
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+assert (property!=null):"Appointments day is not allowed to be null!";
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+assert (property!=null):"Appointments day is not allowed to be null!";
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(System.err==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null."==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println("Caught a SecurityException reading the system property '"+"\""+property+"\""+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4748/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.requests.FileSystemListRequest.java-getByFSName.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.util.Arrays;
+
 private static String getSystemProperty(String property){
 try{
+if(property.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+property);
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.util.Arrays;
+
 private static String getSystemProperty(String property){
+if(property.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+property);
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
+import java.util.Arrays;
+
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+property);
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
-return System.getProperty(property);
+return System.getProperty(property)+"\n\n"+System.getProperty("distance.desc");
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/3128/pattern-ver1-serial/src.alg.embed3d.r.Sammon3DEmbedder.java-getDescription.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+ final String dropStatement="Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.";
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println(dropStatement);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.startsWith("\r\n")){
+property=property.substring(2);
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.startsWith("\r\n")){
+property=property.substring(2);
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.startsWith("\r\n")){
+property=property.substring(2);
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+String loc="Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.";
+System.err.println(loc);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+String loc="Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.";
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
+System.err.println(loc);
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return System.getProperty(property);
 }catch(SecurityException ex){
-System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
+if(property.startsWith("extern ")){
+return property.substring(6,property.length()-1).trim();
+}
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
 return System.getProperty(property);
 }catch(SecurityException ex){
+if(property.startsWith("extern ")){
+return property.substring(6,property.length()-1).trim();
+}
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1302,1323]
------------Candidate---------------
 private static String getSystemProperty(String property){
 try{
+if(property.startsWith("extern ")){
+return property.substring(6,property.length()-1).trim();
+}
 return System.getProperty(property);
 }catch(SecurityException ex){
 System.err.println("Caught a SecurityException reading the system property '"+property+"'; the SystemUtils property value will default to null.");
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:34:19 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast:[1383]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:34:47 CDT - 2019.09.05 AD at 01:39:40 CDT , PNumber : 11280, CandNumber : 22 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return requiredVersion.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5925/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.asset.providers.BlockProvider.java-acceptId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/5444/pattern-ver1-serial/shellGDX.src.com.shellGDX.model2D.ModelObject2D.java-touchDown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return (boolean)JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+int a=0;
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+String OUTSTRING="";
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return (boolean)(JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+int a=1;
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+boolean b=true;
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+if(JAVA_SPECIFICATION_VERSION_AS_ENUM==null){
+return false;
+}
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+assert (requiredVersion!=null);
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+if(requiredVersion!=null){
+return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+}
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return JAVA_SPECIFICATION_VERSION_AS_ENUM==null?null:JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return requiredVersion==null?null:JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return JAVA_SPECIFICATION_VERSION_AS_ENUM!=null&&JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/4433/pattern-ver1-serial/app.src.main.java.it.jaschke.alexandria.NetworkUtility.java-isNetworkConnected.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return JAVA_SPECIFICATION_VERSION_AS_ENUM!=null?JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion):null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
-return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+return (JAVA_SPECIFICATION_VERSION_AS_ENUM==null)?false:JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4091/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.p4.credentials.P4TicketImpl.java-isTicketValueSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+assert (requiredVersion!=null):"Appointments day is not allowed to be null!";
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+if(JAVA_SPECIFICATION_VERSION_AS_ENUM==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+if(requiredVersion==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+if(JAVA_SPECIFICATION_VERSION_AS_ENUM!=null){
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4555/pattern-ver1-serial/commons-app.src.main.java.cz.cuni.mff.xrg.odcs.commons.app.pipeline.transfer.ImportService.java-hasUserPermission.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1367,1384]
------------Candidate---------------
 public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:40:31 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.isJavaVersionMatch:[1399, 1402]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:40:58 CDT - 2019.09.05 AD at 01:45:59 CDT , PNumber : 11318, CandNumber : 84 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version!=null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith(versionPrefix,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return versionPrefix.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.contains(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith(versionPrefix,2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(versionPrefix==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith(versionPrefix.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith((versionPrefix).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith((versionPrefix).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
+import java.util.Collections;
+
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(StringUtils.isEmpty(version)){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version.equals(null)){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version.isEmpty()){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.isEmpty()){
+return true;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.isEmpty()){
+return true;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.isEmpty()){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.isEmpty()){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(true){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return (boolean)version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+int a=0;
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+int a=0;
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+String OUTSTRING="";
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+String OUTSTRING="";
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version.equalsIgnoreCase(null)){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return (boolean)(version.startsWith(versionPrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+return false;
+}
+if(versionPrefix.isEmpty()){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+int a=1;
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+int a=1;
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+boolean b=true;
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+boolean b=true;
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version==null){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+return false;
+}
+if(versionPrefix==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null||version.isEmpty()){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix==version){
+return true;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version==versionPrefix){
+return true;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
-return false;
-}
 return version.startsWith(versionPrefix);
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.equals(version)){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.equals(versionPrefix)){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+assert (version!=null);
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+assert (versionPrefix!=null);
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
+assert (!version.isEmpty());
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
+assert (!versionPrefix.isEmpty());
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+return false;
+}
+if(version.contains(versionPrefix)){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.startsWith("-")){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.startsWith("-")){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version!=null){
+if(version==null){
+return false;
+}
+return version.startsWith(versionPrefix);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix!=null){
+if(version==null){
+return false;
+}
+return version.startsWith(versionPrefix);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
+assert (version!=null);
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
+assert (versionPrefix!=null);
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.matches("[0-9]*")){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.matches("[0-9]*")){
+return false;
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+return false;
+}
+if((Thread.currentThread().interrupted())){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null||"查看红包".equals(version)){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(version.isEmpty()){
+version=null;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(versionPrefix.isEmpty()){
+versionPrefix=null;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null||version==""){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version==null?null:version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version.startsWith(versionPrefix)||version.startsWith("dldungeonsjbg");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3700/pattern-ver1-serial/java.jaredbgreat.dldungeons.api.DLDungeonsAPI.java-isLoaded.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null||version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null||version.trim().isEmpty()){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null&&new File(version).exists()){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/277/pattern-ver1-serial/src.main.java.org.cripac.isee.vpe.ctrl.SystemPropertyCenter.java-getArgs.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return versionPrefix==null?null:version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version!=null&&version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/4433/pattern-ver1-serial/app.src.main.java.it.jaschke.alexandria.NetworkUtility.java-isNetworkConnected.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return version!=null?version.startsWith(versionPrefix):null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
 }
-return version.startsWith(versionPrefix);
+return (version==null)?false:version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4091/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.p4.credentials.P4TicketImpl.java-isTicketValueSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+assert (version!=null):"Appointments day is not allowed to be null!";
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+assert (versionPrefix!=null):"Appointments day is not allowed to be null!";
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(version.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(versionPrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(version==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(versionPrefix==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
-if(version==null){
+if(version==null&&!version.equals("")){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+version);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+versionPrefix);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version!=null){
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
+}
+if(version==null){
+return false;
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4555/pattern-ver1-serial/commons-app.src.main.java.cz.cuni.mff.xrg.odcs.commons.app.pipeline.transfer.ImportService.java-hasUserPermission.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version.startsWith("\r\n")){
+version=version.substring(2);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix.startsWith("\r\n")){
+versionPrefix=versionPrefix.substring(2);
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
 return false;
+}
+if(version==null||versionPrefix==null){
+throw new NullPointerException();
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
 if(version==null){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(versionPrefix==null){
+versionPrefix="20160101";
+}
+if(version==null){
+version="20200101";
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1386,1403]
------------Candidate---------------
 static boolean isJavaVersionMatch(String version,String versionPrefix){
+if(version==null){
+version="20160101";
+}
+if(versionPrefix==null){
+versionPrefix="20200101";
+}
 if(version==null){
 return false;
 }
 return version.startsWith(versionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:49:15 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.isOSMatch:[1418, 1421]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 01:49:42 CDT - 2019.09.05 AD at 01:56:32 CDT , PNumber : 11322, CandNumber : 182 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null&&osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName!=null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osVersion!=null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix,0)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osVersion.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osNamePrefix.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osVersionPrefix.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osName.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osNamePrefix.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersionPrefix.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.contains(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.contains(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix,2)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix,2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osVersion==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osNamePrefix==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osVersionPrefix==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osNamePrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osVersionPrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix.trim())&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith((osNamePrefix).toLowerCase())&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith((osVersionPrefix).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName!=null&&osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7445/pattern-ver1-serial/bungeecord.src.main.java.com.vexsoftware.votifier.bungee.forwarding.OnlineForwardPluginMessagingForwardingSource.java-forward.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith((osNamePrefix).toUpperCase())&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith((osVersionPrefix).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osName.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/2794/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.VNXeCommunicationInterface.java-discoverIscsiPorts.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.isEmpty()){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.isEmpty()){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.isEmpty()){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.isEmpty()){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osVersion.equals(null)){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.isEmpty()){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.isEmpty()){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.isEmpty()){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.isEmpty()){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+int a=0;
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+int a=0;
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+String OUTSTRING="";
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+String OUTSTRING="";
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&!osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/1222/pattern-ver1-serial/src.moefou4j.MoefouImpl.java-rawPost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return (osName.startsWith(osNamePrefix))&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osNamePrefix.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osVersionPrefix.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if("Chrome".equals(osName)||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+int a=1;
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+int a=1;
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return !osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7575/pattern-ver1-serial/app.src.main.java.de.renekolb.loopinglouieextreme.PlayerProfiles.PlayerStatistics.java-updateTotalGamesPlayed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+boolean b=true;
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+boolean b=true;
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osNamePrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osVersionPrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==osName){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==osVersion){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==osName){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==osName){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==osVersion){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==osVersion){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==osNamePrefix){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==osNamePrefix){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==osVersionPrefix){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==osVersionPrefix){
+return true;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.equals(osName)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.equals(osVersion)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.equals(osName)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.equals(osName)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.equals(osVersion)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.equals(osVersion)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.equals(osNamePrefix)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.equals(osNamePrefix)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.equals(osVersionPrefix)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.equals(osVersionPrefix)){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osName!=null);
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osVersion!=null);
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osNamePrefix!=null);
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osVersionPrefix!=null);
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (!osName.isEmpty());
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 01:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (!osNamePrefix.isEmpty());
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (!osVersion.isEmpty());
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (!osVersionPrefix.isEmpty());
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osName.contains(osNamePrefix)){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if(osVersion.contains(osVersionPrefix)){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.startsWith("-")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.startsWith("-")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.startsWith("-")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.startsWith("-")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName!=null){
+if(osName==null||osVersion==null){
+return false;
+}
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion!=null){
+if(osName==null||osVersion==null){
+return false;
+}
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix!=null){
+if(osName==null||osVersion==null){
+return false;
+}
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix!=null){
+if(osName==null||osVersion==null){
+return false;
+}
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (osName!=null);
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (osVersion!=null);
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (osNamePrefix!=null);
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
+assert (osVersionPrefix!=null);
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.matches("[0-9]*")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.matches("[0-9]*")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.matches("[0-9]*")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.matches("[0-9]*")){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+return false;
+}
+if((Thread.currentThread().interrupted())){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix,-1)&&osVersion.startsWith(osVersionPrefix,-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/2090/pattern-ver1-serial/src.main.java.com.github.stagirs.docextractor.latex.Utils.java-getFromBraces.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion!=null&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/947/pattern-ver1-serial/com.ge.research.sadl.jena-wrapper-for-sadl.src.main.java.com.ge.research.sadl.jena.reasoner.JenaReasonerPlugin.java-prepareSubjectPredicateObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName.isEmpty()){
+osName=null;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersion.isEmpty()){
+osVersion=null;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix.isEmpty()){
+osNamePrefix=null;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersionPrefix.isEmpty()){
+osVersionPrefix=null;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return (osName!=null&&osName.startsWith(osNamePrefix))&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName!=null&&osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osName!=null):"Appointments day is not allowed to be null!";
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osVersion!=null):"Appointments day is not allowed to be null!";
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osNamePrefix!=null):"Appointments day is not allowed to be null!";
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+assert (osVersionPrefix!=null):"Appointments day is not allowed to be null!";
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersion.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersionPrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&(osVersion.startsWith(osVersionPrefix)||osVersion.startsWith("text/html"));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6989/pattern-ver1-serial/src.github.daneren2005.dsub.service.RESTMusicService.java-getCoverArt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersion==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersionPrefix==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName.equals(null)||osVersion.equals(null)){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/4706/pattern-ver1-serial/titan-core.src.main.java.com.thinkaurelius.titan.graphdb.query.vertex.AbstractVertexCentricQueryBuilder.java-isPartitionedVertex.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.Collections;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osVersion==null||"查看红包".equals(osName==null)){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6229/pattern-ver1-serial/Mage.Sets.src.mage.sets.betrayersofkamigawa.TomorrowAzamisFamiliar.java-applies.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osName);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osVersion);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osNamePrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osVersionPrefix);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(true){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix)&&!osName.contains("SLICE");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/5516/pattern-ver1-serial/src.com.suushiemaniac.cubing.alglib.move.plane.CubicPlane.java-isRotation.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null||osVersion==null||osVersion.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return (boolean)osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/417/pattern-ver1-serial/ScrabbleConsole.src.dictionary.Dictionary.java-getPossibleDictionaryWords.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osVersion.endsWith(".gif");
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1409/pattern-ver1-serial/src.com.ledpixelart.piledriver.MainActivity.java-accept.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return (boolean)(osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return osName.isEmpty();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/5361/pattern-ver1-serial/src.main.java.carcassonne.model.Player.java-hasUnusedMeeples.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
-return false;
-}
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName.startsWith("\r\n")){
+osName=osName.substring(2);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion.startsWith("\r\n")){
+osVersion=osVersion.substring(2);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix.startsWith("\r\n")){
+osNamePrefix=osNamePrefix.substring(2);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix.startsWith("\r\n")){
+osVersionPrefix=osVersionPrefix.substring(2);
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null||osVersion==null){
+throw new NullPointerException();
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null||osName==null){
+throw new NullPointerException();
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName==null||osVersion==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName==null||osNamePrefix==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osName==null||osVersionPrefix==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix==null||osName==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix==null||osVersion==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osNamePrefix==null||osVersionPrefix==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
 return false;
+}
+if(osVersion==null||osName==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
 if(osName==null||osVersion==null){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+boolean taskList=osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 if(osName==null||osVersion==null){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return taskList;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3828/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.AbstractBlockServiceApiImpl.java-changeVolumeVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null||osName==null||osVersion==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null||osName==null||osVersion==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null||osVersion==null||osName==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null||osVersion==null||osName==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null||osNamePrefix==null||osName==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null||osNamePrefix==null||osVersion==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null||osVersionPrefix==null||osName==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null||osName==null||osNamePrefix==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null||osName==null||osVersionPrefix==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null||osVersion==null||osNamePrefix==null){
+return false;
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null){
+osName="20160101";
+}
+if(osVersion==null){
+osVersion="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null){
+osVersion="20160101";
+}
+if(osName==null){
+osName="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null){
+osName="20160101";
+}
+if(osNamePrefix==null){
+osNamePrefix="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osName==null){
+osName="20160101";
+}
+if(osVersionPrefix==null){
+osVersionPrefix="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null){
+osVersion="20160101";
+}
+if(osNamePrefix==null){
+osNamePrefix="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersion==null){
+osVersion="20160101";
+}
+if(osVersionPrefix==null){
+osVersionPrefix="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null){
+osNamePrefix="20160101";
+}
+if(osName==null){
+osName="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osNamePrefix==null){
+osNamePrefix="20160101";
+}
+if(osVersion==null){
+osVersion="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null){
+osVersionPrefix="20160101";
+}
+if(osName==null){
+osName="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
+if(osVersionPrefix==null){
+osVersionPrefix="20160101";
+}
+if(osVersion==null){
+osVersion="20200101";
+}
 if(osName==null||osVersion==null){
 return false;
 }
 return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1405,1422]
------------Candidate---------------
 static boolean isOSMatch(String osName,String osVersion,String osNamePrefix,String osVersionPrefix){
-if(osName==null||osVersion==null){
+if((osName==null)||(osVersion==null)){
 return false;
 }
-return osName.startsWith(osNamePrefix)&&osVersion.startsWith(osVersionPrefix);
+return (osName.startsWith(osNamePrefix))&&(osVersion.startsWith(osVersionPrefix));
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:04:16 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.SystemUtils.isOSNameMatch:[1435, 1438]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 02:04:44 CDT - 2019.09.05 AD at 02:10:01 CDT , PNumber : 11318, CandNumber : 84 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName!=null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith(osNamePrefix,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osNamePrefix.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.contains(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith(osNamePrefix,2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osNamePrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith(osNamePrefix.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith((osNamePrefix).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith((osNamePrefix).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
+import java.util.Collections;
+
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(StringUtils.isEmpty(osName)){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName.equals(null)){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.isEmpty()){
+return true;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.isEmpty()){
+return true;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.isEmpty()){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.isEmpty()){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(true){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return (boolean)osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+int a=0;
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+int a=0;
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+String OUTSTRING="";
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+String OUTSTRING="";
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName.equalsIgnoreCase(null)){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return (boolean)(osName.startsWith(osNamePrefix));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+return false;
+}
+if(osNamePrefix.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+int a=1;
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+int a=1;
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+boolean b=true;
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+boolean b=true;
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName==null){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+return false;
+}
+if(osNamePrefix==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null||osName.isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName==osNamePrefix){
+return true;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix==osName){
+return true;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
-return false;
-}
 return osName.startsWith(osNamePrefix);
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.equals(osNamePrefix)){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.equals(osName)){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+assert (osName!=null);
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+assert (osNamePrefix!=null);
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
+assert (!osName.isEmpty());
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
+assert (!osNamePrefix.isEmpty());
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+return false;
+}
+if(osName.contains(osNamePrefix)){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.startsWith("-")){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.startsWith("-")){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName!=null){
+if(osName==null){
+return false;
+}
+return osName.startsWith(osNamePrefix);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix!=null){
+if(osName==null){
+return false;
+}
+return osName.startsWith(osNamePrefix);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
+assert (osName!=null);
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
+assert (osNamePrefix!=null);
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.matches("[0-9]*")){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.matches("[0-9]*")){
+return false;
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+return false;
+}
+if((Thread.currentThread().interrupted())){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null||"查看红包".equals(osName)){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osName.isEmpty()){
+osName=null;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osNamePrefix.isEmpty()){
+osNamePrefix=null;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null||osName==""){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName==null?null:osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName.startsWith(osNamePrefix)||osName.startsWith("dldungeonsjbg");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3700/pattern-ver1-serial/java.jaredbgreat.dldungeons.api.DLDungeonsAPI.java-isLoaded.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null||osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null||osName.trim().isEmpty()){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null&&new File(osName).exists()){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/277/pattern-ver1-serial/src.main.java.org.cripac.isee.vpe.ctrl.SystemPropertyCenter.java-getArgs.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osNamePrefix==null?null:osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName!=null&&osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/4433/pattern-ver1-serial/app.src.main.java.it.jaschke.alexandria.NetworkUtility.java-isNetworkConnected.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return osName!=null?osName.startsWith(osNamePrefix):null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
 }
-return osName.startsWith(osNamePrefix);
+return (osName==null)?false:osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4091/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.p4.credentials.P4TicketImpl.java-isTicketValueSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+assert (osName!=null):"Appointments day is not allowed to be null!";
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+assert (osNamePrefix!=null):"Appointments day is not allowed to be null!";
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osNamePrefix.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osName==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osNamePrefix==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
-if(osName==null){
+if(osName==null&&!osName.equals("")){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osName);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
+import java.util.Arrays;
+
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+osNamePrefix);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName!=null){
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
+}
+if(osName==null){
+return false;
+}
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4555/pattern-ver1-serial/commons-app.src.main.java.cz.cuni.mff.xrg.odcs.commons.app.pipeline.transfer.ImportService.java-hasUserPermission.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName.startsWith("\r\n")){
+osName=osName.substring(2);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix.startsWith("\r\n")){
+osNamePrefix=osNamePrefix.substring(2);
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
 return false;
+}
+if(osName==null||osNamePrefix==null){
+throw new NullPointerException();
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
 if(osName==null){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osName==null){
+osName="20160101";
+}
+if(osNamePrefix==null){
+osNamePrefix="20200101";
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/SystemUtils.java[1424,1439]
------------Candidate---------------
 static boolean isOSNameMatch(String osName,String osNamePrefix){
+if(osNamePrefix==null){
+osNamePrefix="20160101";
+}
+if(osName==null){
+osName="20200101";
+}
 if(osName==null){
 return false;
 }
 return osName.startsWith(osNamePrefix);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:13:27 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.JavaVersion.JavaVersion:[89, 90, 91, 92]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 02:13:55 CDT - 2019.09.05 AD at 02:18:11 CDT , PNumber : 11199, CandNumber : 104 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name="";
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+this.value=0;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2689/pattern-ver1-serial/wififixer.src.org.wahtod.wififixer.WFConnection.java-clearConnectedStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String pSubject){
 this.value=value;
-this.name=name;
+this.name=pSubject;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setSubject.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String appVersion){
 this.value=value;
-this.name=name;
+this.name=appVersion;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2797/pattern-ver1-serial/dataprep-backend-common.src.main.java.org.talend.dataprep.api.preparation.Step.java-Step.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=name.trim();
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+value++;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+value++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+this.value++;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+value--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+value--;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+this.value--;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
+import javax.xml.bind.annotation.XmlAccessType;
+
+import javax.xml.bind.annotation.XmlAccessorType;
+
 JavaVersion(float value,String name){
-this.value=value;
+value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3790/pattern-ver1-serial/tools.dbcli.src.main.java.com.emc.storageos.dbcli.wrapper.FSExportMapWrapper.java-setValue.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+synchronized(this){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+synchronized(this){
 this.value=value;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String bindingModes){
 this.value=value;
-this.name=name;
+this.name=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float bindingModes,String name){
+this.value=bindingModes;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String collectorManager){
 this.value=value;
-this.name=name;
+this.name=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float collectorManager,String name){
+this.value=collectorManager;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String abt){
 this.value=value;
-this.name=name;
+this.name=abt;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-timelineservice.src.main.java.org.apache.hadoop.yarn.server.timelineservice.collector.TimelineCollectorWebService.java-setAbout.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String srcPath){
 this.value=value;
-this.name=name;
+this.name=srcPath;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2105/pattern-ver1-serial/src.main.java.loaders.LocalPdfReader.java-LocalPdfReader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String parentFileShare){
 this.value=value;
-this.name=name;
+this.name=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float parentFileShare,String name){
+this.value=parentFileShare;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String pIssued){
 this.value=value;
-this.name=name;
+this.name=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float pIssued,String name){
+this.value=pIssued;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String Pin){
 this.value=value;
-this.name=name;
+this.name=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float Pin,String name){
+this.value=Pin;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=name.toUpperCase();
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String graphdbInput){
 this.value=value;
-this.name=name;
+this.name=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float graphdbInput,String name){
+this.value=graphdbInput;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String thePrescribeMedicationCntl){
 this.value=value;
-this.name=name;
+this.name=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float thePrescribeMedicationCntl,String name){
+this.value=thePrescribeMedicationCntl;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String pScore){
 this.value=value;
-this.name=name;
+this.name=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float pScore,String name){
+this.value=pScore;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String pterm){
 this.value=value;
-this.name=name;
+this.name=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float pterm,String name){
+this.value=pterm;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String boid){
 this.value=value;
-this.name=name;
+this.name=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float boid,String name){
+this.value=boid;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float low,String name){
+this.value=low;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3377/pattern-ver1-serial/parsing.Year.java-setLowTemp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+name="Ball_Charge";
 }

PATTERN : /home/jiajun/GithubData/2015/V38/1676/pattern-ver1-serial/core.src.uk.org.ulcompsoc.ld32.components.upgrades.Ball_Charge.java-Ball_Charge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(value!=0){
 this.value=value;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+value=value;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=name+": ";
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(this.name==null){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+int a=0;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+String OUTSTRING="";
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(name.isEmpty()){
+return ;
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(name!=null){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(equals(name)){
+return ;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(equals(value)){
+return ;
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+this.value=(value/1000);
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+int a=1;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+boolean b=true;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+this.name=name;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/1379/pattern-ver1-serial/src.java.com.strategicgains.hyperexpress.domain.Link.java-Link.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+this.value=value;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/1379/pattern-ver1-serial/src.java.com.strategicgains.hyperexpress.domain.Link.java-Link.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(name==null){
+return ;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(value<0){
+return ;
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=name.replaceAll("\n","");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name=(name).replace("\\","\\\\");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+assert (name!=null);
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+assert (!name.isEmpty());
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(name!=null){
+this.value=value;
+this.name=name;
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(this.value==0){
+return ;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String r){
 this.value=value;
-this.name=name;
+name=r;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
-this.value=value;
+JavaVersion(float r,String name){
+value=r;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+assert (name!=null);
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float value,String sourceGtfsCache){
+name=sourceGtfsCache;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5628/pattern-ver1-serial/src.main.java.com.conveyal.gtfs.api.ApiMain.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
-JavaVersion(float value,String name){
+JavaVersion(float sourceGtfsCache,String name){
+value=sourceGtfsCache;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5628/pattern-ver1-serial/src.main.java.com.conveyal.gtfs.api.ApiMain.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(name.isEmpty()){
+name=null;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+try{
 this.name=name;
+}finally{
+this.value=value;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+try{
 this.value=value;
+}finally{
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+assert (value>=0):"Receive a negative tratment";
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+assert (name!=null):"Appointments day is not allowed to be null!";
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 JavaVersion(float value,String name){
+assert (value!=0):"Receive a size tratment";
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(name.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
-this.name=name;
+this.name="'"+name+"'";
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7/pattern-ver1-serial/src.generator.Generator.java-getTriggerLine.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(value>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(this.value<0){
+this.value=0;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(name==null){
+name=this.name;
+}else {
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+if(this.value!=value){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(this.name!=name){
 this.value=value;
-this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+if(this.name==null){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
-this.value=value;
+if(this.name!=null){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(value!=0){
 this.value=value;
-this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7235/pattern-ver1-serial/src.core.Model.java-addEvent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+this.value=value;
 this.value=value;
+this.name=name;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2359/pattern-ver1-serial/src.main.java.com.deanveloper.playtime.util.QuickSort.java-sort.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+this.value=value;
+this.name=name;
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2359/pattern-ver1-serial/src.main.java.com.deanveloper.playtime.util.QuickSort.java-sort.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(name.startsWith("\r\n")){
+name=name.substring(2);
+}
 this.value=value;
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+if(name.startsWith("/")){
+name=name.substring(1);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+if(value==3){
+System.out.println("debug");
+}
 this.value=value;
 this.name=name;
+if(value==3){
+System.out.println("debug");
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
 this.name=name;
+if(name.endsWith("/")==false){
+name=name+"/";
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+for(int i=0;i<24;i++){
 this.value=value;
+}
 this.name=name;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+for(int i=0;i<24;i++){
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
 this.value=value;
+if(null==name||name.equals("")){
+this.name="null";
+}else {
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+this.value=value;
+if(name.contains("Selected")||name.contains("Deselected")){
+this.name="";
+}else {
 this.value=value;
 this.name=name;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/6027/pattern-ver1-serial/votebox.middle.view.widget.FocusableLabel.java-soundPath.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_7_buggy/src/main/java/org/apache/commons/lang3/JavaVersion.java[83,92]
------------Candidate---------------
 JavaVersion(float value,String name){
+long startTime=System.currentTimeMillis();
 this.value=value;
 this.name=name;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.04 AD at 22:10:26 CDT
---------TIME : 2019.09.05 AD at 02:24:18 CDT
--------------- END -----------------
Finish : lang-7 > patch : 0 | Start : Wed Sep 04 22:10:26 CDT 2019 | End : 2019.09.05 AD at 02:24:18 CDT
