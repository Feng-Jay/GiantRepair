Repair : lang_52
Current failed test : org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript | 2019.09.07 AD at 16:05:49 CDT
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaScript:[122]#1.0
Compute Candidate : 2019.09.07 AD at 16:06:18 CDT - 2019.09.07 AD at 16:09:48 CDT , PNumber : 11306, CandNumber : 32 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return str;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return new String(escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return (String)escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+int a=0;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+String OUTSTRING="";
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return (String)(escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+int a=1;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+boolean b=true;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str==null){
+return "";
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str==null){
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+assert (str!=null);
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str!=null){
+return escapeJavaStyleString(str,true);
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return String.format("%s",escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("https")){
+return str;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.equalsIgnoreCase("/")){
+return str;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.equalsIgnoreCase("")){
+return "";
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)==null?"":escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)!=null?escapeJavaStyleString(str,true):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)==null?new String():escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("extern ")){
+return str.substring(6,str.length()-1).trim();
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:11:03 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaScript:[138]#1.0
Compute Candidate : 2019.09.07 AD at 16:11:19 CDT - 2019.09.07 AD at 16:14:57 CDT , PNumber : 11306, CandNumber : 76 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
-escapeJavaStyleString(out,str,true);
+escapeJavaStyleString(out,str,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.close();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/1130/pattern-ver1-serial/dsr.src.main.java.eu.emi.dsr.db.mongodb.MongoDBServiceDatabase.java-queryJSON.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+escapeJavaScript(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.flush();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if("index".equals(str)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if("index".equals(out)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals("TIME")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals("TIME")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if("&null".equals(str)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if("&null".equals(out)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+str=str;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out=out;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.contains("deviantart.com")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+int a=0;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals(str)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals(out)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+String OUTSTRING="";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals(InputStream.class)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals(InputStream.class)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("-")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("extern ")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append(" & ");
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("https")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append("    }\n");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+int a=1;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+out.append(str);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+boolean b=true;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equalsIgnoreCase("")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.matches("[0-9]*")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (str!=null);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (out!=null);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (!str.isEmpty());
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out!=null){
+escapeJavaStyleString(out,str,true);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str!=null){
+escapeJavaStyleString(out,str,true);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (out!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (str!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+throw new IOException("Title must not be empty!");
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.isEmpty()){
+str=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (out!=null):"Appointments day is not allowed to be null!";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (str!=null):"Appointments day is not allowed to be null!";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.write(System.getProperty("line.separator"));
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4655/pattern-ver1-serial/ljprojectbuilder.swingclient.src.main.java.logic.generators.FrontendGenerator.java-addLinesToFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append(" (");
+out.append(") ");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
+if(str.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
+if(out.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.equals("INFO")){
+return ;
+}
+if(str.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null||out==null){
+throw new IOException();
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null||str==null){
+throw new IOException();
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.endsWith("/")==false){
+str=str+"/";
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+long startTime=System.currentTimeMillis();
 escapeJavaStyleString(out,str,true);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 16:18:00 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString:[224, 173, 229, 230, 231, 223, 226, 227, 172, 175, 179, 180, 181, 184, 186, 188, 190, 221, 237, 242]#1.0
Compute Candidate : 2019.09.07 AD at 16:18:17 CDT - 2019.09.07 AD at 17:33:25 CDT , PNumber : 11361, CandNumber : 925 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+return ;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+return ;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+continue;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+continue;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+continue;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+continue;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+continue;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+continue;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+continue;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+continue;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+continue;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+continue;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+return ;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2908/pattern-ver1-serial/edu.usc.cssl.tacit.topicmodel.lda.ui.src.edu.usc.cssl.tacit.topicmodel.lda.ui.LdaTopicModelView.java-run.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+return ;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out!=null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str!=null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;sz<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(sz<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<=sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+sz=str.length();
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Collection;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,myUid;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i>sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch>32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,MAX_SERVICE_NODES;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+break;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+break;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+break;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+break;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+break;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i--){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(str==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(out==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch<0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch<0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch<0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch<0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch!=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:36:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch!=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch!=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(true){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
+case 3 :
+
+return ;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4175/pattern-ver1-serial/keyvalue.common.src.main.java.alluxio.thrift.KeyValueWorkerClientService.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
+case 3 :
+
+return ;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4175/pattern-ver1-serial/keyvalue.common.src.main.java.alluxio.thrift.KeyValueWorkerClientService.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,localLevel;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+case 203 :
+
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 203 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
+case 2 :
+
+return ;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7455/pattern-ver1-serial/main.java.com.noni.embryio.TabsPagerAdapter.java-getItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
+case 2 :
+
+return ;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7455/pattern-ver1-serial/main.java.com.noni.embryio.TabsPagerAdapter.java-getItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 10 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i++,new ArrayList<KeyBinding>()){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 13 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:37:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
+case 0 :
+
+return ;
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
+case 0 :
+
+return ;
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalStateException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/6680/pattern-ver1-serial/src.rollup.RollupSeq.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
+case 401 :
+
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+case 27 :
+
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 27 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;sz++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
+case 4 :
+
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
+case 4 :
+
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,_afterComposeMethodCache;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+i++;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.List;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,mActions;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/3698/pattern-ver1-serial/src.org.nutz.lang.Invoking.java-Invoking.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,mRelationId;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
+
+case 5 :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u000"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6350/pattern-ver1-serial/src.main.java.Handlers.FileHandler.java-writeToJson.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
-int sz;
+ final int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ final char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
-int sz;
+ int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=0;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException("The Writer must not be null".trim());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.isEmpty()){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.isEmpty()){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+str);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+str);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+str);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+str);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+out);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+out);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+out);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+out);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+escapeSingleQuote);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+escapeSingleQuote);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+ch++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+ch++;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+ch++;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+ch++;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+ch++;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ch++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ch++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch++;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(!escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+ch++;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+ch++;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+ch++;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+i++;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+i++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+i++;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+i++;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+i++;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+i++;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+i++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+i++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+ch--;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+ch--;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+ch--;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+ch--;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+ch--;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ch--;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ch--;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch--;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<=sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+i--;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+i--;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+i--;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+i--;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+i--;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+i--;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+i--;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+i--;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=2;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+synchronized(out){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write((int)('\\'));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write((int)('\\'));
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
-out.write('"');
+out.write((int)('"'));
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
-out.write('\'');
+out.write((int)('\''));
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+char ch=str.charAt((int)(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
-out.write(ch);
+out.write((int)(ch));
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new UnsupportedOperationException();
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+synchronized(out){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+synchronized(out){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException(("The Writer must not be null").toLowerCase());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.close();
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.close();
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.close();
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.close();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.close();
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.close();
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.close();
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.close();
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.close();
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+out.close();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+sz++;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
-private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+private static void escapeJavaStyleString(Writer out,String str,boolean broadcast) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(broadcast){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.flush();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.flush();
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.close();
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.close();
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.close();
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,continentName,countryCode;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
+out.close();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2850/pattern-ver1-serial/app.src.main.java.martinigt.einfachsparen.data.TransactionDbHelper.java-addTransaction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+break;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+break;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+break;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;sz<i;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+while(true){
+
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+while(true){
+
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+while(true){
+
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+while(true){
+
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+while(true){
+
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+while(true){
+
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 17:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+while(true){
+
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+while(true){
+
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+break;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+break;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+break;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+break;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+escapeSingleQuote);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.flush();
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.flush();
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.flush();
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.flush();
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.flush();
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.flush();
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.flush();
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.flush();
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+ch);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+ch);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+ch);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+sz);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+sz);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+sz);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+i);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+i);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+i);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+i--;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.isEmpty()){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.isEmpty()){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.isEmpty()){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+i++;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+i++;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+i++;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+i++;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+i++;
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+i++;
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+i++;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+i++;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException(("The Writer must not be null").toUpperCase());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str==null){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str==null){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out==null){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out==null){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out==null){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out==null){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(out==null){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out==null){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out==null){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out==null){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out==null){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+if(out==null){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i++,Charset.forName("UTF-8")){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if("\\u"+hex(ch)!=null){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if("\\u0"+hex(ch)!=null){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if("\\u00"+hex(ch)!=null){
 out.write("\\u00"+hex(ch));
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out!=null){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out!=null){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out!=null){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out!=null){
 out.write("\\u00"+hex(ch));
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out.equals(null)){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.equals(null)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.length()!=0){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if('\\'>0){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if("index".equals(out)){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if("index".equals(str)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if("index".equals(out)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if("index".equals(out)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if("index".equals(out)){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if("index".equals(out)){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if("index".equals(out)){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals("TIME")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.equals("TIME")){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals("TIME")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals("TIME")){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals("TIME")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals("TIME")){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(str)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if("&null".equals(str)){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(out)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if("&null".equals(out)){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if("&null".equals(out)){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(escapeSingleQuote)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if("&null".equals(escapeSingleQuote)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.equals("DATETIME")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.equals("DATETIME")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out.equals("DATETIME")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("DATETIME")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out=out;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out=out;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(i==4){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(!str.isEmpty()){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch=1000;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(true){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(true){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(true){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(true){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(true){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(true){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(escapeSingleQuote&&escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch<0){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(ch<0){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(ch<0){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.contains("deviantart.com")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+return ;
+}
+if(str.contains("deviantart.com")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=0xEfffffff&(str.length());
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff/2){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff/2){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f/2){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+int a=0;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+int a=0;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+int a=0;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+int a=0;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+int a=0;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+int a=0;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+int a=0;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+int a=0;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+int a=0;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+int a=0;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
-private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+private static void escapeJavaStyleString(Writer out,String str,boolean readOnly) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(!readOnly){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals(out)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals(str)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals(escapeSingleQuote)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals(escapeSingleQuote)){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals(ch)){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+String OUTSTRING="";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+String OUTSTRING="";
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+String OUTSTRING="";
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+String OUTSTRING="";
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+String OUTSTRING="";
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+String OUTSTRING="";
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+String OUTSTRING="";
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;){
+i++;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str==null){
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals(InputStream.class)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.equals(InputStream.class)){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals(InputStream.class)){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out.equals(InputStream.class)){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(Double.isNaN(ch)){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(Double.isNaN(ch)){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(Double.isNaN(ch)){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(Double.isNaN(ch)){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("-")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("extern ")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("extern ")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz<=0){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write(Math.abs('\\'));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write(Math.abs('\\'));
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
-out.write('"');
+out.write(Math.abs('"'));
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
-out.write('\'');
+out.write(Math.abs('\''));
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;Math.abs(i++)){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+char ch=str.charAt(Math.abs(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
-out.write(ch);
+out.write(Math.abs(ch));
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.contains(str)){
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz==0){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+int indexSelection=0;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+int indexSelection=0;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+int indexSelection=0;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+int indexSelection=0;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+int indexSelection=0;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+int indexSelection=0;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+int indexSelection=0;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.equals("setPackMode")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.equals("setPackMode")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.equals("setPackMode")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out.equals("setPackMode")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.equals("sounds")){
+continue;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.append(" & ");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.append(" & ");
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.append(" & ");
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.append(" & ");
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.append(" & ");
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.append(" & ");
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.append(" & ");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.append(" & ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.append(" & ");
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("https")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("https")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
+if(out!=null){
 out.write('"');
+}
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
+if(out!=null){
 out.write('\'');
+}
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
+if(out!=null){
 out.write(ch);
+}
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
+if(out!=null){
 out.write('\\');
+}
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
+if(out!=null){
 out.write('b');
+}
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.append("    }\n");
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.append("    }\n");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.append("    }\n");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.append("    }\n");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.append("    }\n");
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+out.append("    }\n");
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+int a=1;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+int a=1;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+int a=1;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+int a=1;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+int a=1;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+int a=1;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+int a=1;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+int a=1;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+int a=1;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+int a=1;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.append(ch);
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.append(ch);
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.append(ch);
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.append(ch);
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.append(ch);
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.append(ch);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+boolean b=true;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+boolean b=true;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+boolean b=true;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+boolean b=true;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+boolean b=true;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+boolean b=true;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+boolean b=true;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+boolean b=true;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+boolean b=true;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+boolean b=true;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=str.length()+1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equalsIgnoreCase("")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out==null){
+continue;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out==null){
+continue;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out==null){
+continue;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out==null){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+continue;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+if(out==null){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+continue;
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out==null){
+continue;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.matches("[0-9]*")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.matches("[0-9]*")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str.isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('"');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\'');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write(ch);
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('b');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('n');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('"');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('\'');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write(ch);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write('\\');
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('b');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\\');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('"');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\'');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\\');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('"');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\'');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('b');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('n');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write(ch);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write(ch);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write(ch);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\\');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\\');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\\');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('\\');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+out.write('\\');
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('\\');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write(ch);
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write(ch);
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write(ch);
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write(ch);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write(ch);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write(ch);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write(ch);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write(ch);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\\');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+out.write('\\');
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write('\\');
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.write('\\');
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==Long.MIN_VALUE){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==Long.MIN_VALUE){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==Long.MIN_VALUE){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==Long.MIN_VALUE){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('b');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('n');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('"');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\'');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('"');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\'');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write(ch);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('b');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('n');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('b');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('n');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('b');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('n');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('b');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('"');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\'');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('"');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\'');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('"');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('n');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('t');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('f');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('r');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('"');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\'');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('b');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('n');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('"');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('\'');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (str!=null);
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+assert (out!=null);
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+assert (str!=null);
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (out!=null);
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+assert (out!=null);
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+assert (out!=null);
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+assert (out!=null);
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+assert (out!=null);
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+assert (out!=null);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+assert (out!=null);
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (!str.isEmpty());
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+assert (!str.isEmpty());
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+out.close();
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+out.close();
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.close();
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.close();
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write('\\');
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\\');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\\');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out!=null){
+out.write('\\');
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out!=null){
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(out!=null){
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(out!=null){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(out!=null){
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out!=null){
+char ch=str.charAt(i);
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out!=null){
+if(out==null){
+throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str==null){
+return ;
+}
+int sz;
+sz=str.length();
+for(int i=0;i<sz;i++){
+char ch=str.charAt(i);
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
+}
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
+out.write('\\');
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (ch!=str.charAt(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+sz++;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+sz++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+sz++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+sz++;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+sz++;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+sz++;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+sz++;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
+sz++;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+sz++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+assert (out!=null);
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+assert (out!=null);
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+assert (out!=null);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+assert (out!=null);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+assert (out!=null);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+assert (out!=null);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+assert (out!=null);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+assert (out!=null);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (out!=null);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (str!=null);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+assert (out!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+assert (out!=null);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write('\\');
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.write('\\');
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+out.write('\\');
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null||"查看红包".equals(out)){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||"查看红包".equals(ch)){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||"查看红包".equals(ch)){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||"查看红包".equals(ch)){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||"查看红包".equals(ch)){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==3){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==3){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==3){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==3){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(escapeSingleQuote){
+out.write('\\');
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>7){
+throw new IOException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.isEmpty()){
+str=null;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str.isEmpty()){
+str=null;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str==""){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch<0||ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch<0||ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch<0||ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<0||ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==0){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==0){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==0){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==0){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+return ;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch>9){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch>9){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch>9){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch>9){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+str);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+out);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+escapeSingleQuote);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+i);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+ch);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+sz);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+hex(ch)+" -u "+str);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+hex(ch)+" -u "+str);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+hex(ch)+" -u "+str);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+hex(ch)+" -u "+out);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff&&ch<4000000){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff&&ch<4000000){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f&&ch<4000000){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32&&ch<4000000){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null||out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff&&ch!=9999){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff&&ch!=9999){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f&&ch!=9999){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32&&ch!=9999){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(0xfff>0&&ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(0xff>0&&ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(0x7f>0&&ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(32>0&&ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (out!=null):"Appointments day is not allowed to be null!";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (str!=null):"Appointments day is not allowed to be null!";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.isEmpty()){
+str=null;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if((str.length()-2)>=0){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/677/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.VirtualNasServerDataTable.java-VirtualNasServerInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz<0){
+sz=0;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.append(" (");
+out.append(") ");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch<=0){
+ch=1;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
-out.write('\\');
 out.write('\\');
+out.write('\\'+",");
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f-1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>0xf-1){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f-1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>0xf-1){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.equals("NAME")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("NAME")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null&&!out.equals("")){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null&&!str.equals("")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out!=null){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
+if(str.equals("INFO")){
+return ;
 }
+if(str.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.equals("INFO")){
+return ;
+}
+if(str.equals("UNIT")){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u0"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u00"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write("\\u00"+hex(ch));
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str!=null){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write("\\u"+hex(ch));
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u0"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u000"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u00"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u000"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u0"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+ final String dropStatement="\\u"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+ final String dropStatement="\\u0"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+ final String dropStatement="\\u00"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+String loc="\\u"+hex(ch);
+out.write(loc);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+String loc="\\u0"+hex(ch);
+out.write(loc);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+String loc="\\u00"+hex(ch);
+out.write(loc);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+String loc="\\u00"+hex(ch);
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
+String loc="\\u000"+hex(ch);
+out.write(loc);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u"+hex(ch);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write(loc);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u0"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write(loc);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+String loc="\\u00"+hex(ch);
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0xfff){
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u0"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write("\\u"+hex(ch));
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write("\\u0"+hex(ch));
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u000"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u"+hex(ch);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write(currency);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u0"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write(currency);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(currency);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(currency);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u000"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
+out.write(currency);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('\'');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write(ch);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('\'');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write(ch);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u00"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u00"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u0"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(".");
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/6450/pattern-ver1-serial/src.calculator.Calculator.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(".");
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/6450/pattern-ver1-serial/src.calculator.Calculator.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+long startTime=System.currentTimeMillis();
 out.write('\\');
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+long startTime=System.currentTimeMillis();
 out.write("\\u"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+long startTime=System.currentTimeMillis();
 out.write("\\u0"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+long startTime=System.currentTimeMillis();
 out.write("\\u00"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+long startTime=System.currentTimeMillis();
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+long startTime=System.currentTimeMillis();
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+long startTime=System.currentTimeMillis();
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+long startTime=System.currentTimeMillis();
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 26, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+out.write('\\');
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 54, UPD : 54, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+out.write("\\u"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 57, UPD : 57, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/5343/pattern-ver1-serial/playerSDK.src.main.java.com.kaltura.playersdk.players.KPlayerController.java-removePlayer.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3791/pattern-ver1-serial/jbpm-flow.src.main.java.org.jbpm.workflow.instance.node.BoundaryEventNodeInstance.java-signalEvent.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/3749/pattern-ver1-serial/src.main.java.me.chaopeng.utils.DirUtils.java-rm.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 0, INS : 0, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
 out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/3749/pattern-ver1-serial/src.main.java.me.chaopeng.utils.DirUtils.java-rm.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 0, INS : 0, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
 break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
 }else {
+if(ch>0x7f){
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 }else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
 }else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 }else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
+out.write("\\u000"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
 out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 }
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
 break;
+}
+}
+}
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 107, UPD : 0, INS : 0, DEL : 107
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch==12){
+return ;
+}else {
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 107, UPD : 107, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:30:36 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString:[150, 149, 153, 154, 155]#0.7071067811865475
Compute Candidate : 2019.09.07 AD at 18:30:52 CDT - 2019.09.07 AD at 18:43:05 CDT , PNumber : 11343, CandNumber : 129 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
+ StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
-return null;
+return new String();
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5649/pattern-ver1-serial/src.todolist.logic.FunctionChecker.java-deleteChecker.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str!=null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return str.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(escapeSingleQuotes){
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
-return null;
+return "";
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5469/pattern-ver1-serial/OnlineBookStoreServer.src.Server.Routines.java-getMYSQLPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
-return null;
+return str;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/56/pattern-ver1-serial/src.main.java.javax.shell.Shell.java-getInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
-return null;
+return str;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/56/pattern-ver1-serial/src.main.java.javax.shell.Shell.java-getInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.close();
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3406/pattern-ver1-serial/core.src.main.java.net.novucs.ftop.DatabaseManager.java-load.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return null;
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return "";
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString().trim();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return str;
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return new String(writer.toString());
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return (String)writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.flush();
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/7069/pattern-ver1-serial/kevoree-library.org.kevoree.library.gossiper.src.main.java.org.kevoree.library.gossiper.rest.StringZipper.java-unzipStringFromBytes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString().toLowerCase();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return (String)(writer.toString());
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
+ioe.printStackTrace();
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append("]");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append("            scope.apply();\n");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(true){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null&&escapeSingleQuotes){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+int a=0;
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+int a=0;
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.isEmpty()){
+return null;
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.isEmpty()){
+return null;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append(" & ");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append("    }\n");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+int a=1;
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+int a=1;
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append(str);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+boolean b=true;
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+boolean b=true;
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString()+".*";
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str==null){
+return "";
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str==null){
+return "";
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer==null){
+return "";
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str==null){
+return null;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer==null){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(writer==null){
+return null;
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(str==null){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if("&null".equals(str)){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+return null;
+}
+if("&null".equals(escapeSingleQuotes)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if("&null".equals(escapeSingleQuotes)){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if("&null".equals(writer)){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer.equals("")){
+return "";
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
+StringWriter writer=new StringWriter(str.length()*2-1);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer.equals("-1")){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
+StringWriter writer=new StringWriter(str.length()*2*-1);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
+StringWriter writer=new StringWriter(str.length()*2*1000);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+assert (str!=null);
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+assert (str!=null);
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+assert (writer!=null);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+assert (!str.isEmpty());
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.contains(str)){
+return null;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+return null;
+}
+if(str.contains(str)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer.equals(InputStream.class)){
+return str;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str!=null){
+StringWriter writer=new StringWriter(str.length()*2);
+escapeJavaStyleString(writer,str,escapeSingleQuotes);
+return writer.toString();
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str!=null){
+if(str==null){
+return null;
+}
+try{
+StringWriter writer=new StringWriter(str.length()*2);
+escapeJavaStyleString(writer,str,escapeSingleQuotes);
+return writer.toString();
+}catch(IOException ioe){
+ioe.printStackTrace();
+return null;
+}
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString().replaceAll("\r","");
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return String.format("%s",writer.toString());
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+assert (writer!=new StringWriter(str.length()*2));
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.startsWith("https")){
+return str;
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.startsWith("https")){
+return str;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.equalsIgnoreCase("/")){
+return str;
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.equalsIgnoreCase("/")){
+return str;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+assert (str!=null);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
+assert (str!=null);
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.equalsIgnoreCase("")){
+return "";
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.equalsIgnoreCase("")){
+return "";
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer.equals(null)){
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(writer.equals(null)){
+return null;
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(writer.equals("655")){
+System.out.println();
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer.equals("655")){
+System.out.println();
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
+StringWriter writer=new StringWriter(Math.abs(str.length()*2));
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
-}catch(IOException ioe){
+}catch(Exception ioe){
+ioe.printStackTrace();
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/3586/pattern-ver1-serial/EREFAndroid.app.src.main.java.rs.veselinromic.eref.android.fragment.SubjectsFragment.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString()==null?"":writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+escapeJavaStyleString(writer,str,escapeSingleQuotes);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(str.isEmpty()){
+str=null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString()!=null?writer.toString():new String();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer==null?null:writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer.toString()==null?new String():writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(writer!=null){
 return writer.toString();
+}else {
+return null;
+}
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer!=null?writer.toString():null;
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+assert (str!=null):"Appointments day is not allowed to be null!";
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+assert (writer!=null):"Appointments day is not allowed to be null!";
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
-return writer.toString();
+return writer!=null?writer.toString():"";
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3020/pattern-ver1-serial/src.main.java.com.karumi.reddo.task.GitHubRepositoryTask.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(writer==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append(" (");
+writer.append(") ");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append("\"category\" : [");
+writer.append("]");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer==null){
+throw new IllegalStateException("User isn't registered! "+str);
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+StringWriter writer=new StringWriter(str.length()*2);
 if(str==null){
 return null;
 }
 try{
-StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str==null){
+return "";
+}
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer==null){
+return str;
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+writer.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+writer.append("</table>");
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(str==null||writer==null){
+throw new NullPointerException();
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
+if(writer==null||str==null){
+throw new NullPointerException();
+}
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
+if(str.endsWith("/")==false){
+str=str+"/";
+}
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
+if(str.startsWith("extern ")){
+return str.substring(6,str.length()-1).trim();
+}
 if(str==null){
 return null;
 }
 try{
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[141,161]
------------Candidate---------------
 private static String escapeJavaStyleString(String str,boolean escapeSingleQuotes){
 if(str==null){
 return null;
 }
 try{
+if(str.startsWith("extern ")){
+return str.substring(6,str.length()-1).trim();
+}
 StringWriter writer=new StringWriter(str.length()*2);
 escapeJavaStyleString(writer,str,escapeSingleQuotes);
 return writer.toString();
 }catch(IOException ioe){
 ioe.printStackTrace();
 return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:48:08 CDT
--------------- END -----------------
Current failed test : org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit | 2019.09.07 AD at 18:48:08 CDT
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaScript:[122]#1.0
Compute Candidate : 2019.09.07 AD at 18:48:39 CDT - 2019.09.07 AD at 18:51:59 CDT , PNumber : 11306, CandNumber : 32 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return str;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return new String(escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return (String)escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+int a=0;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+String OUTSTRING="";
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return (String)(escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+int a=1;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+boolean b=true;
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str==null){
+return "";
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str==null){
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+assert (str!=null);
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str!=null){
+return escapeJavaStyleString(str,true);
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return String.format("%s",escapeJavaStyleString(str,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("https")){
+return str;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.equalsIgnoreCase("/")){
+return str;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.equalsIgnoreCase("")){
+return "";
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)==null?"":escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)!=null?escapeJavaStyleString(str,true):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
-return escapeJavaStyleString(str,true);
+return escapeJavaStyleString(str,true)==null?new String():escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[100,123]
------------Candidate---------------
 public static String escapeJavaScript(String str){
+if(str.startsWith("extern ")){
+return str.substring(6,str.length()-1).trim();
+}
 return escapeJavaStyleString(str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:53:10 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaScript:[138]#1.0
Compute Candidate : 2019.09.07 AD at 18:53:25 CDT - 2019.09.07 AD at 18:57:07 CDT , PNumber : 11306, CandNumber : 76 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
-escapeJavaStyleString(out,str,true);
+escapeJavaStyleString(out,str,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.close();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/1130/pattern-ver1-serial/dsr.src.main.java.eu.emi.dsr.db.mongodb.MongoDBServiceDatabase.java-queryJSON.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+escapeJavaScript(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.flush();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if("index".equals(str)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if("index".equals(out)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals("TIME")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals("TIME")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if("&null".equals(str)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if("&null".equals(out)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+str=str;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out=out;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.contains("deviantart.com")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+int a=0;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals(str)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals(out)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+String OUTSTRING="";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals(InputStream.class)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals(InputStream.class)){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("-")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("extern ")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append(" & ");
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("https")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append("    }\n");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+int a=1;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+out.append(str);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+boolean b=true;
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equalsIgnoreCase("")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.matches("[0-9]*")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (str!=null);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (out!=null);
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (!str.isEmpty());
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out!=null){
+escapeJavaStyleString(out,str,true);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str!=null){
+escapeJavaStyleString(out,str,true);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (out!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+assert (str!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.isEmpty()){
+throw new IOException("Title must not be empty!");
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.isEmpty()){
+str=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (out!=null):"Appointments day is not allowed to be null!";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+assert (str!=null):"Appointments day is not allowed to be null!";
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.write(System.getProperty("line.separator"));
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4655/pattern-ver1-serial/ljprojectbuilder.swingclient.src.main.java.logic.generators.FrontendGenerator.java-addLinesToFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+out.append(" (");
+out.append(") ");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
+if(str.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 escapeJavaStyleString(out,str,true);
+if(out.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.equals("INFO")){
+return ;
+}
+if(str.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(str==null||out==null){
+throw new IOException();
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 18:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+if(out==null||str==null){
+throw new IOException();
+}
 escapeJavaStyleString(out,str,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 19:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
 escapeJavaStyleString(out,str,true);
+if(str.endsWith("/")==false){
+str=str+"/";
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 19:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[125,139]
------------Candidate---------------
 public static void escapeJavaScript(Writer out,String str) throws IOException{
+long startTime=System.currentTimeMillis();
 escapeJavaStyleString(out,str,true);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 19:00:05 CDT
--------------- END -----------------
Location : org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString:[224, 173, 229, 230, 231, 223, 226, 227, 172, 175, 179, 180, 181, 184, 186, 188, 190, 221, 237, 242]#1.0
Compute Candidate : 2019.09.07 AD at 19:00:21 CDT - 2019.09.07 AD at 20:15:36 CDT , PNumber : 11361, CandNumber : 928 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+return ;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+return ;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+return ;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+return ;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+continue;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+continue;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+continue;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+continue;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+continue;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+continue;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+continue;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+continue;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+continue;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+continue;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+return ;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+return ;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2908/pattern-ver1-serial/edu.usc.cssl.tacit.topicmodel.lda.ui.src.edu.usc.cssl.tacit.topicmodel.lda.ui.LdaTopicModelView.java-run.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+return ;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+return ;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out!=null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str!=null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;sz<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(sz<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<=sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+sz=str.length();
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Collection;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,myUid;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i>sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch>32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,MAX_SERVICE_NODES;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+break;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+break;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+break;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+break;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+break;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i--){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(str==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(out==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch<0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch<0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch<0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch<0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch!=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch!=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch!=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(true){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
+case 3 :
+
+return ;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4175/pattern-ver1-serial/keyvalue.common.src.main.java.alluxio.thrift.KeyValueWorkerClientService.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
+case 3 :
+
+return ;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4175/pattern-ver1-serial/keyvalue.common.src.main.java.alluxio.thrift.KeyValueWorkerClientService.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,localLevel;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+case 203 :
+
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 203 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
+case 2 :
+
+return ;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7455/pattern-ver1-serial/main.java.com.noni.embryio.TabsPagerAdapter.java-getItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
+case 2 :
+
+return ;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7455/pattern-ver1-serial/main.java.com.noni.embryio.TabsPagerAdapter.java-getItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 10 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i++,new ArrayList<KeyBinding>()){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 13 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
+case 0 :
+
+return ;
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
+case 0 :
+
+return ;
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalStateException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/6680/pattern-ver1-serial/src.rollup.RollupSeq.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
+case 401 :
+
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+case 27 :
+
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+case 27 :
+
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;sz++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
+case 4 :
+
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
+case 4 :
+
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,_afterComposeMethodCache;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+i++;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.List;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,mActions;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/3698/pattern-ver1-serial/src.org.nutz.lang.Invoking.java-Invoking.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,mRelationId;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Iterator;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
+
+case 5 :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u000"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6350/pattern-ver1-serial/src.main.java.Handlers.FileHandler.java-writeToJson.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
-int sz;
+ final int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ final char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
-int sz;
+ int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+ char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=0;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException("The Writer must not be null".trim());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.isEmpty()){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.isEmpty()){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+str);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+str);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+str);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+str);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+out);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+out);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+out);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+out);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+escapeSingleQuote);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+escapeSingleQuote);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+ch++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+ch++;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+ch++;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+ch++;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+ch++;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ch++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ch++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch++;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(!escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+ch++;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+ch++;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+ch++;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+i++;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+i++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+i++;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+i++;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+i++;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+i++;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+i++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+i++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+ch--;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+ch--;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+ch--;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+ch--;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+ch--;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ch--;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ch--;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch--;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<=sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+i--;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+i--;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+i--;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+i--;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+i--;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+i--;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+i--;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+i--;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=2;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+synchronized(out){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write((int)('\\'));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write((int)('\\'));
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
-out.write('"');
+out.write((int)('"'));
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
-out.write('\'');
+out.write((int)('\''));
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+char ch=str.charAt((int)(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
-out.write(ch);
+out.write((int)(ch));
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new UnsupportedOperationException();
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+synchronized(out){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+synchronized(out){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException(("The Writer must not be null").toLowerCase());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.close();
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.close();
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.close();
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/7132/pattern-ver1-serial/Breakpoint.src.main.java.cz.GravelCZLP.BreakpointInfo.Main.java-canConnect.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.close();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.close();
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.close();
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.close();
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.close();
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.close();
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+out.close();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1029/pattern-ver1-serial/zuul-netty.src.main.java.com.netflix.zuul.context.RxNettySessionContextFactory.java-write.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+sz++;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
-private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+private static void escapeJavaStyleString(Writer out,String str,boolean broadcast) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(broadcast){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.flush();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.flush();
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5398/pattern-ver1-serial/MediaManagementSystem.src.main.java.com.csci4448.MediaManagementSystem.model.GenericDAOImpl.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.close();
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.close();
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.close();
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4430/pattern-ver1-serial/src.com.uoko.rpc.handler.ClientInvokeHandler.java-channelReadComplete.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0,continentName,countryCode;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
+out.close();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2850/pattern-ver1-serial/app.src.main.java.martinigt.einfachsparen.data.TransactionDbHelper.java-addTransaction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+break;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+break;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+break;
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+break;
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;sz<i;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+while(true){
+
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+while(true){
+
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+while(true){
+
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+while(true){
+
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+while(true){
+
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+while(true){
+
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:38:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+while(true){
+
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+while(true){
+
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+break;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+break;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+break;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+break;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+break;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+break;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+escapeSingleQuote);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>=0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>=0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>=0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<=32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>=0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.flush();
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.flush();
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.flush();
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.flush();
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.flush();
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.flush();
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.flush();
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.flush();
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/5408/pattern-ver1-serial/src.main.java.com.qwazr.externalizor.AutoExternalizor.java-writeExternal.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+ch);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+ch);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+ch);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+sz);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+sz);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+sz);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+i);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+i);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+i);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+i--;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.isEmpty()){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.isEmpty()){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.isEmpty()){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+i++;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+i++;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+i++;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+i++;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+i++;
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+i++;
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+i++;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+i++;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
-throw new IllegalArgumentException("The Writer must not be null");
+throw new IllegalArgumentException(("The Writer must not be null").toUpperCase());
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str==null){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str==null){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out==null){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out==null){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out==null){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out==null){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(out==null){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out==null){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out==null){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out==null){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out==null){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+if(out==null){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;i++,Charset.forName("UTF-8")){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if("\\u"+hex(ch)!=null){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if("\\u0"+hex(ch)!=null){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if("\\u00"+hex(ch)!=null){
 out.write("\\u00"+hex(ch));
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out!=null){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out!=null){
 out.write("\\u"+hex(ch));
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out!=null){
 out.write("\\u0"+hex(ch));
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out!=null){
 out.write("\\u00"+hex(ch));
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out==null){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out.equals(null)){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.equals(null)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.length()!=0){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if('\\'>0){
 out.write('\\');
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if("index".equals(out)){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if("index".equals(str)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if("index".equals(out)){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if("index".equals(out)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if("index".equals(out)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if("index".equals(out)){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if("index".equals(out)){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if("index".equals(out)){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals("TIME")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.equals("TIME")){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals("TIME")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals("TIME")){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals("TIME")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals("TIME")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals("TIME")){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(str)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if("&null".equals(str)){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(out)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if("&null".equals(out)){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if("&null".equals(out)){
+return ;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if("&null".equals(out)){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if("&null".equals(escapeSingleQuote)){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if("&null".equals(escapeSingleQuote)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.equals("DATETIME")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.equals("DATETIME")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out.equals("DATETIME")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("DATETIME")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+if(out.equals("DATETIME")){
+return ;
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out=out;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out=out;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(i==4){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(!str.isEmpty()){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ch=1000;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(true){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(true){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(true){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(true){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(true){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(true){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(escapeSingleQuote&&escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch<0){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(ch<0){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(ch<0){
+return ;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.contains("deviantart.com")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+return ;
+}
+if(str.contains("deviantart.com")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=0xEfffffff&(str.length());
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff/2){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff/2){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f/2){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+int a=0;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+int a=0;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+int a=0;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+int a=0;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+int a=0;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+int a=0;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+int a=0;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+int a=0;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+int a=0;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+int a=0;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
-private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+private static void escapeJavaStyleString(Writer out,String str,boolean readOnly) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
-if(escapeSingleQuote){
+if(!readOnly){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals(str)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals(out)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals(escapeSingleQuote)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals(escapeSingleQuote)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals(escapeSingleQuote)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals(escapeSingleQuote)){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals(ch)){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+String OUTSTRING="";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+String OUTSTRING="";
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+String OUTSTRING="";
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+String OUTSTRING="";
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+String OUTSTRING="";
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+String OUTSTRING="";
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+String OUTSTRING="";
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+String OUTSTRING="";
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;){
+i++;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str==null){
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals(InputStream.class)){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.equals(InputStream.class)){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals(InputStream.class)){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals(InputStream.class)){
+return ;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out.equals(InputStream.class)){
+return ;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(Double.isNaN(ch)){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(Double.isNaN(ch)){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(Double.isNaN(ch)){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(Double.isNaN(ch)){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("-")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("extern ")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("extern ")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz<=0){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write(Math.abs('\\'));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write(Math.abs('\\'));
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
-out.write('"');
+out.write(Math.abs('"'));
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
-out.write('\'');
+out.write(Math.abs('\''));
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
-for(int i=0;i<sz;i++){
+for(int i=0;i<sz;Math.abs(i++)){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
-char ch=str.charAt(i);
+char ch=str.charAt(Math.abs(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
-out.write(ch);
+out.write(Math.abs(ch));
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.contains(str)){
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz==0){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+int indexSelection=0;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+int indexSelection=0;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+int indexSelection=0;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+int indexSelection=0;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+int indexSelection=0;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+int indexSelection=0;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+int indexSelection=0;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.equals("setPackMode")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.equals("setPackMode")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.equals("setPackMode")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(out.equals("setPackMode")){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.equals("sounds")){
+continue;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out.equals("sounds")){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.append(" & ");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.append(" & ");
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.append(" & ");
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.append(" & ");
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.append(" & ");
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.append(" & ");
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.append(" & ");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.append(" & ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.append(" & ");
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("https")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("https")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
+if(out!=null){
 out.write('"');
+}
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
+if(out!=null){
 out.write('\'');
+}
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
+if(out!=null){
 out.write(ch);
+}
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
+if(out!=null){
 out.write('\\');
+}
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
+if(out!=null){
 out.write('b');
+}
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
+if(out!=null){
 out.write('\\');
+}
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/1378/pattern-ver1-serial/src.fyp.samoleary.WildlifePrototype2.GMap.GMapActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.append("    }\n");
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.append("    }\n");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.append("    }\n");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.append("    }\n");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.append("    }\n");
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+out.append("    }\n");
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+int a=1;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+int a=1;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+int a=1;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+int a=1;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+int a=1;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+int a=1;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+int a=1;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+int a=1;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+int a=1;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+int a=1;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.append(ch);
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.append(ch);
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.append(ch);
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.append(ch);
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.append(ch);
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.append(ch);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.equalsIgnoreCase("/")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+boolean b=true;
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+boolean b=true;
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+boolean b=true;
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+boolean b=true;
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+boolean b=true;
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+boolean b=true;
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+boolean b=true;
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+boolean b=true;
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+boolean b=true;
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+boolean b=true;
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=str.length()+1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equalsIgnoreCase("")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out==null){
+continue;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(out==null){
+continue;
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(out==null){
+continue;
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+if(out==null){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+continue;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+if(out==null){
+continue;
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+if(out==null){
+continue;
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+continue;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out==null){
+continue;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.matches("[0-9]*")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.matches("[0-9]*")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str.isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('"');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\'');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write(ch);
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('b');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('n');
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('"');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('\'');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write(ch);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write('\\');
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('b');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\\');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('"');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\'');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\\');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('"');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\'');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('b');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('n');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write(ch);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write(ch);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write(ch);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\\');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\\');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write('\\');
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\\');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('\\');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+out.write('\\');
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('\\');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+out.write(ch);
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write(ch);
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:54:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write(ch);
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write(ch);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write(ch);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write(ch);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write(ch);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write(ch);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\\');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+out.write('\\');
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write('\\');
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.write('\\');
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==Long.MIN_VALUE){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==Long.MIN_VALUE){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==Long.MIN_VALUE){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==Long.MIN_VALUE){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('b');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.write('n');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('"');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\'');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('"');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('\'');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write(ch);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('b');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+out.write('n');
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('b');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+out.write('n');
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('b');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+out.write('n');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+out.write('b');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('"');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\'');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('"');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write('\'');
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('"');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+out.write('\\');
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write('\\');
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('n');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('t');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('f');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+out.write('r');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('"');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\'');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('b');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('n');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('\\');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('"');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+try{
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+}finally{
+out.write('\'');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (str!=null);
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+assert (out!=null);
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+assert (str!=null);
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (out!=null);
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+assert (out!=null);
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+assert (out!=null);
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+assert (out!=null);
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+assert (out!=null);
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+assert (out!=null);
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+assert (out!=null);
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (!str.isEmpty());
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+assert (!str.isEmpty());
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+out.close();
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+out.close();
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.close();
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.Calendar;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.close();
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.close();
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1478/pattern-ver1-serial/app.src.main.java.com.yiyuanliu.flipgank.data.DataManager.java-checkLoadHistory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
+out.write('\\');
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out!=null){
+out.write('\\');
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out!=null){
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(out!=null){
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(out!=null){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(out!=null){
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out!=null){
+char ch=str.charAt(i);
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out!=null){
+if(out==null){
+throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str==null){
+return ;
+}
+int sz;
+sz=str.length();
+for(int i=0;i<sz;i++){
+char ch=str.charAt(i);
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
+}
+}
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('\'');
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write(ch);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+out.write('b');
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (ch!=str.charAt(i));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+sz++;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+sz++;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+sz++;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+sz++;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+sz++;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+sz++;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+sz++;
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
+sz++;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
-sz=str.length();
+sz=-1;
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+sz++;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+assert (out!=null);
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+assert (out!=null);
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+assert (out!=null);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+assert (out!=null);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+assert (out!=null);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+assert (out!=null);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+assert (out!=null);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+assert (out!=null);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (out!=null);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+assert (str!=null);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+assert (out!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+assert (out!=null);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write('\\');
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+out.write('\\');
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write('\\');
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+out.write('\\');
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
+out.write('\\');
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null||"查看红包".equals(out)){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||"查看红包".equals(ch)){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||"查看红包".equals(ch)){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||"查看红包".equals(ch)){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||"查看红包".equals(ch)){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==3){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==3){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==3){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==3){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(escapeSingleQuote){
+out.write('\\');
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+if(out==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>7){
+throw new IOException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 20:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(str.isEmpty()){
+str=null;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
+}
+if(str.isEmpty()){
+str=null;
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str==""){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch<0||ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch<0||ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch<0||ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<0||ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(escapeSingleQuote){
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch==0){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch==0){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch==0){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch==0){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
+return ;
+}
+if(out.getClass().getSimpleName().startsWith("SystemException")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff||ch>9){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff||ch>9){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32||ch>9){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f||ch>9){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+str);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+out);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+escapeSingleQuote);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+i);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+ch);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+" -u "+sz);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+hex(ch)+" -u "+str);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u0"+hex(ch)+" -u "+str);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u00"+hex(ch)+" -u "+str);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u"+hex(ch)+" -u "+out);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(escapeSingleQuote){
+out.write('\\');
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff&&ch<4000000){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff&&ch<4000000){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f&&ch<4000000){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32&&ch<4000000){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null||out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff&&ch!=9999){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff&&ch!=9999){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f&&ch!=9999){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(ch<32&&ch!=9999){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(0xfff>0&&ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(0xff>0&&ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(0x7f>0&&ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
+if(32>0&&ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (out!=null):"Appointments day is not allowed to be null!";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+assert (str!=null):"Appointments day is not allowed to be null!";
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+assert (out!=null):"Appointments day is not allowed to be null!";
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.isEmpty()){
+str=null;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
+if((str.length()-2)>=0){
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/677/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.VirtualNasServerDataTable.java-VirtualNasServerInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(sz<0){
+sz=0;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+out.append(" (");
+out.append(") ");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch<=0){
+ch=1;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(i+ch>=str.length()){
+return ;
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/3301/pattern-ver1-serial/src.net.fathomsoft.nova.util.StringUtils.java-containsString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write('\\'+",");
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
-out.write('\\');
 out.write('\\');
+out.write('\\'+",");
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
-out.write('\\');
+out.write('\\'+",");
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str==null){
+return ;
+}
+if(out==null){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out==null){
+return ;
+}
+if(str==null){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f-1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
+if(ch>0xfff-1){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>0xf-1){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
-if(ch>0x7f){
+if(ch>0x7f-1){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
+if(ch>0xff-1){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
-if(ch>0xf){
+if(ch>0xf-1){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.equals("NAME")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
+if(out.equals("NAME")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("NAME")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(out.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(out.equals("NAME")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
-if(out==null){
+if(out==null&&!out.equals("")){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
-if(str==null){
+if(str==null&&!str.equals("")){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(out!=null){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
+if(str.equals("INFO")){
+return ;
 }
+if(str.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
+if(str.equals("INFO")){
+return ;
+}
+if(str.equals("UNIT")){
+return ;
+}
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
+}
+if(out.equals("INFO")){
+return ;
+}
+if(out.equals("UNIT")){
+return ;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
+if(out.equals("INFO")){
+return ;
 }
+if(out.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u0"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+out.write("\\u00"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write("\\u00"+hex(ch));
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str!=null){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+out.write("\\u"+hex(ch));
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u0"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u000"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u00"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u000"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u0"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+out.write("\\u00"+hex(ch));
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+ final String dropStatement="\\u"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+ final String dropStatement="\\u0"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+ final String dropStatement="\\u00"+hex(ch);
+out.write(dropStatement);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+String loc="\\u"+hex(ch);
+out.write(loc);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+String loc="\\u0"+hex(ch);
+out.write(loc);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+String loc="\\u00"+hex(ch);
+out.write(loc);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+String loc="\\u00"+hex(ch);
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
+String loc="\\u000"+hex(ch);
+out.write(loc);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u"+hex(ch);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write(loc);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u0"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write(loc);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+String loc="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+String loc="\\u00"+hex(ch);
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(loc);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0xfff){
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+out.write("\\u0"+hex(ch));
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+out.write("\\u000"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u"+hex(ch);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write(currency);
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u0"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write(currency);
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(currency);
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u00"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(currency);
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+ final String currency="\\u000"+hex(ch);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
-out.write("\\u000"+hex(ch));
+out.write(currency);
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 4, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write('\'');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
+out.write('\\');
+out.write(ch);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write('\'');
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+out.write('\\');
+out.write(ch);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
+out.write('\\');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+out.write('\\');
+out.write('"');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u00"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write('\\');
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u00"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u0"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write('\\');
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
-out.write('\\');
+out.write("\\u"+hex(ch));
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
-out.write("\\u0"+hex(ch));
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write("\\u0"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
+out.write(".");
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/6450/pattern-ver1-serial/src.calculator.Calculator.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
-out.write("\\u00"+hex(ch));
+out.write(".");
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/6450/pattern-ver1-serial/src.calculator.Calculator.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+long startTime=System.currentTimeMillis();
 out.write('\\');
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+long startTime=System.currentTimeMillis();
 out.write("\\u"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+long startTime=System.currentTimeMillis();
 out.write("\\u0"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+long startTime=System.currentTimeMillis();
 out.write("\\u00"+hex(ch));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
+long startTime=System.currentTimeMillis();
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+long startTime=System.currentTimeMillis();
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
+long startTime=System.currentTimeMillis();
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
+long startTime=System.currentTimeMillis();
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 26, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
+out.write('\\');
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 54, UPD : 54, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+out.write("\\u"+hex(ch));
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 57, UPD : 57, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/5343/pattern-ver1-serial/playerSDK.src.main.java.com.kaltura.playersdk.players.KPlayerController.java-removePlayer.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3791/pattern-ver1-serial/jbpm-flow.src.main.java.org.jbpm.workflow.instance.node.BoundaryEventNodeInstance.java-signalEvent.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 0, INS : 0, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 89, UPD : 89, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
 out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 1, DEL : 89
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 0, INS : 0, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
 }else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
 out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
 out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
 }else {
-if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
 }
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
 break;
-}
-}
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
-if(ch>0xff){
 out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 98, UPD : 98, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
 }else {
+if(ch>0x7f){
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 }else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
 }else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
 }else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
+out.write("\\u000"+hex(ch));
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
+if(ch>0xfff){
+out.write("\\u"+hex(ch));
+}else {
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
 out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
+}
+}
+}
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
+}else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 }else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
+}
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
+break;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
+}
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
+}else {
+if(ch>0xff){
+out.write("\\u0"+hex(ch));
+}else {
+if(ch>0x7f){
+out.write("\\u00"+hex(ch));
+}else {
+if(ch<32){
+switch (ch){
+case '\b' :
+
+out.write('\\');
+out.write('b');
+break;
+case '\n' :
+
+out.write('\\');
+out.write('n');
+break;
+case '\t' :
+
+out.write('\\');
+out.write('t');
+break;
+case '\f' :
+
+out.write('\\');
+out.write('f');
+break;
+case '\r' :
+
+out.write('\\');
+out.write('r');
+break;
+default :
+
+if(ch>0xf){
+out.write("\\u00"+hex(ch));
 }else {
+out.write("\\u000"+hex(ch));
+}
+break;
+}
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
+}
+break;
+}
+}else {
+switch (ch){
+case '\'' :
+
+if(escapeSingleQuote){
+out.write('\\');
 }
+out.write('\'');
+break;
+case '"' :
+
+out.write('\\');
+out.write('"');
+break;
+case '\\' :
+
+out.write('\\');
+out.write('\\');
+break;
+default :
+
+out.write(ch);
 break;
+}
+}
+}
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 99, UPD : 0, INS : 1, DEL : 98
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
-if(ch>0xfff){
-out.write("\\u"+hex(ch));
-}else {
-if(ch>0xff){
-out.write("\\u0"+hex(ch));
-}else {
-if(ch>0x7f){
-out.write("\\u00"+hex(ch));
-}else {
-if(ch<32){
-switch (ch){
-case '\b' :
-
-out.write('\\');
-out.write('b');
-break;
-case '\n' :
-
-out.write('\\');
-out.write('n');
-break;
-case '\t' :
-
-out.write('\\');
-out.write('t');
-break;
-case '\f' :
-
-out.write('\\');
-out.write('f');
-break;
-case '\r' :
-
-out.write('\\');
-out.write('r');
-break;
-default :
-
-if(ch>0xf){
-out.write("\\u00"+hex(ch));
-}else {
-out.write("\\u000"+hex(ch));
-}
-break;
-}
-}else {
-switch (ch){
-case '\'' :
-
-if(escapeSingleQuote){
-out.write('\\');
-}
-out.write('\'');
-break;
-case '"' :
-
-out.write('\\');
-out.write('"');
-break;
-case '\\' :
-
-out.write('\\');
-out.write('\\');
-break;
-default :
-
-out.write(ch);
-break;
-}
-}
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 107, UPD : 0, INS : 0, DEL : 107
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_52_buggy/src/java/org/apache/commons/lang/StringEscapeUtils.java[163,242]
------------Candidate---------------
 private static void escapeJavaStyleString(Writer out,String str,boolean escapeSingleQuote) throws IOException{
 if(out==null){
 throw new IllegalArgumentException("The Writer must not be null");
 }
 if(str==null){
 return ;
 }
 int sz;
 sz=str.length();
 for(int i=0;i<sz;i++){
 char ch=str.charAt(i);
+if(ch==12){
+return ;
+}else {
 if(ch>0xfff){
 out.write("\\u"+hex(ch));
 }else {
 if(ch>0xff){
 out.write("\\u0"+hex(ch));
 }else {
 if(ch>0x7f){
 out.write("\\u00"+hex(ch));
 }else {
 if(ch<32){
 switch (ch){
 case '\b' :
 
 out.write('\\');
 out.write('b');
 break;
 case '\n' :
 
 out.write('\\');
 out.write('n');
 break;
 case '\t' :
 
 out.write('\\');
 out.write('t');
 break;
 case '\f' :
 
 out.write('\\');
 out.write('f');
 break;
 case '\r' :
 
 out.write('\\');
 out.write('r');
 break;
 default :
 
 if(ch>0xf){
 out.write("\\u00"+hex(ch));
 }else {
 out.write("\\u000"+hex(ch));
 }
 break;
 }
 }else {
 switch (ch){
 case '\'' :
 
 if(escapeSingleQuote){
 out.write('\\');
 }
 out.write('\'');
 break;
 case '"' :
 
 out.write('\\');
 out.write('"');
 break;
 case '\\' :
 
 out.write('\\');
 out.write('\\');
 break;
 default :
 
 out.write(ch);
 break;
+}
 }
 }
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 107, UPD : 107, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript, org.apache.commons.lang.time.StopWatchTest::testStopWatchSplit]
---------START : 2019.09.07 AD at 16:05:49 CDT
---------TIME : 2019.09.07 AD at 21:05:50 CDT
--------------- END -----------------
Finish : lang-52 > patch : 0 | Start : Sat Sep 07 16:05:49 CDT 2019 | End : 2019.09.07 AD at 21:05:50 CDT
